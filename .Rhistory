lib=paste0("C:\\Users\\Mike_2\\Desktop",
"\\methyl_master_packages"))
with_libpaths(new = paste0("C:\\Users\\Mike_2\\Desktop",
"\\methyl_master_packages"),
install_github('sean-cho/Epicopy'),
repo="https://github.com/sean-cho/Epicopy.git",
upgrade = "never")
devtools::with_libpaths(
new = paste0("C:\\Users\\Mike_2\\Desktop",
"\\methyl_master_packages"),
devtools::install_github('sean-cho/Epicopy'),
repo="https://github.com/sean-cho/Epicopy.git",
upgrade = "never")
withr::with_libpaths(
new = paste0("C:\\Users\\Mike_2\\Desktop",
"\\methyl_master_packages"),
devtools::install_github('sean-cho/Epicopy'),
repo="https://github.com/sean-cho/Epicopy.git",
upgrade = "never")
withr::with_libpaths(
new = paste0("C:\\Users\\Mike_2\\Desktop",
"\\methyl_master_packages"),
devtools::install_github('sean-cho/Epicopy',
upgrade = "never"))
download.file("https://github.com/sean-cho/Epicopy.git",
destdir=paste0("C:\\Users\\Mike_2\\Desktop",
"\\methyl_master_packages"),
method="curl",
quiet = FALSE,
mode = "w",
cacheOK = TRUE,
extra = getOption("download.file.extra"),
headers = NULL)
download.file("https://github.com/sean-cho/Epicopy.git",
destfile=paste0("C:\\Users\\Mike_2\\Desktop",
"\\methyl_master_packages",
"Epicopy"),
method="curl",
quiet = FALSE,
mode = "w",
cacheOK = TRUE,
extra = getOption("download.file.extra"),
headers = NULL)
download.file("https://github.com/sean-cho/Epicopy.git",
destfile=paste0("C:\\Users\\Mike_2\\Desktop",
"\\methyl_master_packages",
"\\Epicopy"),
method="git",
quiet = FALSE,
mode = "w",
cacheOK = TRUE,
extra = getOption("download.file.extra"),
headers = NULL)
download.file("https://github.com/sean-cho/Epicopy/branches/master.tar.gz",
destfile=paste0("C:\\Users\\Mike_2\\Desktop",
"\\methyl_master_packages",
"\\Epicopy"),
method="curl",
quiet = FALSE,
mode = "w",
cacheOK = TRUE,
extra = getOption("download.file.extra"),
headers = NULL)
#cnAnalysis450k (== 0.99.26)
#this is the version at mknoll/cnAnalysis450k
download.file("https://github.com/mknoll/cnAnalysis450k/branches/master.tar.gz",
destfile=paste0("C:\\Users\\Mike_2\\Desktop",
"\\methyl_master_packages",
"\\cnAnalysis450k_0.99.26.tar.gz"),
method="curl",
quiet = FALSE,
mode = "w",
cacheOK = TRUE,
extra = getOption("download.file.extra"),
headers = NULL)
#CNAclinic (== 1.0)
#this is the version at sdchandra/CNAclinic
download.file("https://github.com/sdchandra/CNAclinic/branches/master.tar.gz",
destfile=paste0("C:\\Users\\Mike_2\\Desktop",
"\\methyl_master_packages",
"\\CNAclinic_1.0.tar.gz"),
method="curl",
quiet = FALSE,
mode = "w",
cacheOK = TRUE,
extra = getOption("download.file.extra"),
headers = NULL)
download.file("https://github.com/wilkelab/ungeviz/blob/master.tar.gz",
destfile=paste0("C:\\Users\\Mike_2\\Desktop",
"\\methyl_master_packages",
"\\ungeviz_0.1.0.tar.gz"),
method="curl",
quiet = FALSE,
mode = "w",
cacheOK = TRUE,
extra = getOption("download.file.extra"),
headers = NULL)
devtools::install_gitub("mmariani/methylmaster", upgrade="never")
devtools::install_github("mmariani/methylmaster", upgrade="never")
devtools::install_github("mmariani123/methylmaster", upgrade="never")
BiocManager::install("dplyr")
library(dplyr)
packageVersion(dplyr)
packageVersion("dplyr")
devtools::install_github("mmariani123/methylmaster", upgrade="never")
.libPaths
.libPaths()
library(data.table)
pakcageVersion(data.table)
packageVersion("data.table")
detools::load_all()
devtools::load_all()
install.packages("data.table", version = "1.9.4", lib = "C:\\Users\\Mike\\Desktop\\methyl_master_r_lib", update = FALSE, destdir = "C:\\Users\\Mike\\Desktop\\methyl_master_r_lib")
devtools::load_all()
devtools::install_github("mmariani123/methylmaster", upgrade="never")
devtools::install_github("mmariani123/methylmaster", upgrade="never")
devtools::install_github("mmariani123/methylmaster", upgrade="never")
library(testthat)
test_file()
testthat::test_file()
testthat::test_check(
)
testthat::test_check()
devtools::load_all()
warnings()
devtools::load_all()
devtools::load_all()
devtools::load_all()
for (f in list.files("R", full.names=TRUE)) parse(f)
for (f in list.files("R", full.names=TRUE)) print(f); parse(f)
for (f in list.files("R", full.names=TRUE)) print(f); parse(f)
expression(methyl_master_tcga_clin_data <- function(clin.tcga.file.path=NULL,
clin.sample.names=NULL,
clin.copy.files=FALSE,
clin.sample.sheet=TRUE,
clin.idat.dir=getwd(),
clin.sub.dir=NULL
){
clin.data <- read.table(file = clin.tcga.file.path,
header=TRUE,
sep=",",
stringsAsFactors = FALSE)
if(clin.sample.shee==TRUE){
select.cbio.samples <-
readxl::read_excel(path = clin.tcga.file.path,
col_names = TRUE,
sheet = 1)
}else{
select.cbio.samples <- clin.sample.names
}
select.cbio.primaries <-
clin.data[clin.data$submitter_id %in% select.cbio.samples$sample,"primary"]
kirc.sample.paths <- list.files(idat.dir,
full.names = TRUE,
recursive = TRUE)
##unique.primary.samples <-
##  unique(basename(gsub("_Grn.idat$|_Red.idat","",kirc.sample.paths)))
##length(unique.primary.samples) ##487
##kirc.sample.paths[grepl(select.cbio.primaries, select.cbio.primaries)]
copy.samples <-
unlist(lapply(select.cbio.primaries,
FUN = function(x){
grep(x,
kirc.sample.paths,
value=TRUE)
}
)
)
if(clin.copy.files==TRUE){
file.copy(copy.samples, clin.sub.dir)
}else{
return(copy.samples)
}
})
parse(expression(methyl_master_tcga_clin_data <- function(clin.tcga.file.path=NULL,
clin.sample.names=NULL,
clin.copy.files=FALSE,
clin.sample.sheet=TRUE,
clin.idat.dir=getwd(),
clin.sub.dir=NULL
){
clin.data <- read.table(file = clin.tcga.file.path,
header=TRUE,
sep=",",
stringsAsFactors = FALSE)
if(clin.sample.shee==TRUE){
select.cbio.samples <-
readxl::read_excel(path = clin.tcga.file.path,
col_names = TRUE,
sheet = 1)
}else{
select.cbio.samples <- clin.sample.names
}
select.cbio.primaries <-
clin.data[clin.data$submitter_id %in% select.cbio.samples$sample,"primary"]
kirc.sample.paths <- list.files(idat.dir,
full.names = TRUE,
recursive = TRUE)
##unique.primary.samples <-
##  unique(basename(gsub("_Grn.idat$|_Red.idat","",kirc.sample.paths)))
##length(unique.primary.samples) ##487
##kirc.sample.paths[grepl(select.cbio.primaries, select.cbio.primaries)]
copy.samples <-
unlist(lapply(select.cbio.primaries,
FUN = function(x){
grep(x,
kirc.sample.paths,
value=TRUE)
}
)
)
if(clin.copy.files==TRUE){
file.copy(copy.samples, clin.sub.dir)
}else{
return(copy.samples)
}
}))
devtools::load_all()
for (f in list.files("R", full.names=TRUE)) print(f); parse(f)
for (f in list.files("R", full.names=TRUE)) print(f); parse(f)
devtools::load_all()
devtools::load_all()
for (f in list.files("R", full.names=TRUE)) print(f); parse(f)
devtools::load_all()
for (f in list.files("R", full.names=TRUE)) print(f); parse(f)
for (f in list.files("R", full.names=TRUE)) {print(f); parse(f)}
devtools::load_all()
devtools::test_active_file()
devtools::install_github("mmariani123/MethylMasteR",upgrade="never")
devtools::load_all()
devtools::load_all()
input.dir <- system.file("extdata",
package = 'MethylMasteR')
output.dir <- "C:\\Users\\Mike_2\\Desktop\\methyl_master_test"
sample.sheet.path <- system.file("extdata",
"Sample_Sheet_Test.csv",
package = 'MethylMasteR')
routine.run <- "sesame"
methyl_master(
routine                   = routine.run, #The routine to run
input.dir                 = input.dir, #The input (idat.files) directory
output.dir                = output.dir, #The output directory
sample.sheet.path         = sample.sheet.path, #The path to the MethylMasteR
sample sheet
r.lib.path                = .libPaths()[1], #The path to the R Library path
file.sep                  = "\\\\", #For windows or "/" for Linux
create.dir                = TRUE, #Whether to cretae directory if does not
#exist?
save.seg                  = TRUE, #Whether to save segmentation results
n.cores                   = 1, #Multicore does not work for all routines
#on all operating systems
os.type                   = "windows", #Or "linux"
proj                      = "TCGA-KIRC", #"TCGA-BLCA" etc.
visualize                 = TRUE, #Whether to output plots,
visualize.individual      = FALSE, #Whether to output indvidual sample plots,
#only works for routine sesame
reference                 = "internal", #"comparison" or 'internal"
reference.name            = NA, #For Epicopy use NA for median,
#"all" is not currently supported
#by Epicopy
comparison                = c("tumor","normal"), #Always required treatment
#first then contro can also be more specific when
#designing sample sheet and use values like
# c("tumor_male","cord_male etc") etc.
#Note: in routines where internal reference is
#used, second argument is ignored
form.thresholds           = NULL, #Used to calculate final CNV state.
#If NULL, equation is is used;
#otherwise, specify threshold vector
#of lower and upper beta values such
#as c(-0.3,0.3),
overlap.density           = 0.1, #For combining final CNV calls for confidence
sesame.data.cache         = "EPIC", #The default sesame reference platform
sesame.data.normal        = 'EPIC.5.normal', #The default sesame and hm450
#internal reference samples
sesame.ref.version        = "hg19", #Or can set to "hg38"
hm450.workflow            = "B", #The HM450 subworkflow to use - only B
#is running currently.
#"A" no correction,
#"B" median correction (default),
#"C" run Conumee
champ.padj                = 0.05, #padj to filter champ results
champ.control             = FALSE, #run champ.control etc.
champ.run.combat          = FALSE, #run champ.run.combat etc.
champ.run.dmp             = FALSE, #If only one pheno var must = FALSE
champ.run.dmr             = FALSE, #If only one pheno var must = FALSE
champ.run.block           = FALSE, #If only one pheno var must = FALSE
champ.run.gsea            = FALSE, #Requires dmp and dmr results
champ.run.epimod          = FALSE, #If only one pheno var must = FALSE
epi.run.gistic            = TRUE, #Whether to Run GISTIC in Epicopy workflow
olaps.split.field         = "Sample_ID", #Split field to ise during overlaps
#Don't change unless you know what
#you are doing
estimate.recurrence       = TRUE, #Estimate recursion to produce p values when
#finding overlaps with population_ranges
#functions
ov.pvalue                 = 0.05, #pvalue threshold for overlaps identified
ov.keep.extra.columns     = TRUE, #Keep extra metadata columns when finding
#overlaps
simplify.reduce           = weightedmean, #Equation to use during reduction
)
methyl_master(
routine                   = routine.run, #The routine to run
input.dir                 = input.dir, #The input (idat.files) directory
output.dir                = output.dir, #The output directory
sample.sheet.path         = sample.sheet.path, #The path to the MethylMasteR
#sample sheet
r.lib.path                = .libPaths()[1], #The path to the R Library path
file.sep                  = "\\\\", #For windows or "/" for Linux
create.dir                = TRUE, #Whether to cretae directory if does not
#exist?
save.seg                  = TRUE, #Whether to save segmentation results
n.cores                   = 1, #Multicore does not work for all routines
#on all operating systems
os.type                   = "windows", #Or "linux"
proj                      = "TCGA-KIRC", #"TCGA-BLCA" etc.
visualize                 = TRUE, #Whether to output plots,
visualize.individual      = FALSE, #Whether to output indvidual sample plots,
#only works for routine sesame
reference                 = "internal", #"comparison" or 'internal"
reference.name            = NA, #For Epicopy use NA for median,
#"all" is not currently supported
#by Epicopy
comparison                = c("tumor","normal"), #Always required treatment
#first then contro can also be more specific when
#designing sample sheet and use values like
# c("tumor_male","cord_male etc") etc.
#Note: in routines where internal reference is
#used, second argument is ignored
form.thresholds           = NULL, #Used to calculate final CNV state.
#If NULL, equation is is used;
#otherwise, specify threshold vector
#of lower and upper beta values such
#as c(-0.3,0.3),
overlap.density           = 0.1, #For combining final CNV calls for confidence
sesame.data.cache         = "EPIC", #The default sesame reference platform
sesame.data.normal        = 'EPIC.5.normal', #The default sesame and hm450
#internal reference samples
sesame.ref.version        = "hg19", #Or can set to "hg38"
hm450.workflow            = "B", #The HM450 subworkflow to use - only B
#is running currently.
#"A" no correction,
#"B" median correction (default),
#"C" run Conumee
champ.padj                = 0.05, #padj to filter champ results
champ.control             = FALSE, #run champ.control etc.
champ.run.combat          = FALSE, #run champ.run.combat etc.
champ.run.dmp             = FALSE, #If only one pheno var must = FALSE
champ.run.dmr             = FALSE, #If only one pheno var must = FALSE
champ.run.block           = FALSE, #If only one pheno var must = FALSE
champ.run.gsea            = FALSE, #Requires dmp and dmr results
champ.run.epimod          = FALSE, #If only one pheno var must = FALSE
epi.run.gistic            = TRUE, #Whether to Run GISTIC in Epicopy workflow
olaps.split.field         = "Sample_ID", #Split field to ise during overlaps
#Don't change unless you know what
#you are doing
estimate.recurrence       = TRUE, #Estimate recursion to produce p values when
#finding overlaps with population_ranges
#functions
ov.pvalue                 = 0.05, #pvalue threshold for overlaps identified
ov.keep.extra.columns     = TRUE, #Keep extra metadata columns when finding
#overlaps
simplify.reduce           = weightedmean #Equation to use during reduction
)
?sesameDataCacheAll()
?mkdir
devtools::load_all()
input.dir <- system.file("extdata",
package = 'MethylMasteR')
output.dir <- "C:\\Users\\Mike_2\\Desktop\\methyl_master_test"
sample.sheet.path <- system.file("extdata",
"Sample_Sheet_Test.csv",
package = 'MethylMasteR')
routine.run <- "sesame"
methyl_master(
routine                   = routine.run, #The routine to run
input.dir                 = input.dir, #The input (idat.files) directory
output.dir                = output.dir, #The output directory
sample.sheet.path         = sample.sheet.path, #The path to the MethylMasteR
#sample sheet
r.lib.path                = .libPaths()[1], #The path to the R Library path
file.sep                  = "\\\\", #For windows or "/" for Linux
create.dir                = TRUE, #Whether to cretae directory if does not
#exist?
save.seg                  = TRUE, #Whether to save segmentation results
n.cores                   = 1, #Multicore does not work for all routines
#on all operating systems
os.type                   = "windows", #Or "linux"
proj                      = "TCGA-KIRC", #"TCGA-BLCA" etc.
visualize                 = TRUE, #Whether to output plots,
visualize.individual      = FALSE, #Whether to output indvidual sample plots,
#only works for routine sesame
reference                 = "internal", #"comparison" or 'internal"
reference.name            = NA, #For Epicopy use NA for median,
#"all" is not currently supported
#by Epicopy
comparison                = c("tumor","normal"), #Always required treatment
#first then contro can also be more specific when
#designing sample sheet and use values like
# c("tumor_male","cord_male etc") etc.
#Note: in routines where internal reference is
#used, second argument is ignored
form.thresholds           = NULL, #Used to calculate final CNV state.
#If NULL, equation is is used;
#otherwise, specify threshold vector
#of lower and upper beta values such
#as c(-0.3,0.3),
overlap.density           = 0.1, #For combining final CNV calls for confidence
sesame.data.cache         = "EPIC", #The default sesame reference platform
sesame.data.normal        = 'EPIC.5.normal', #The default sesame and hm450
#internal reference samples
sesame.ref.version        = "hg19", #Or can set to "hg38"
hm450.workflow            = "B", #The HM450 subworkflow to use - only B
#is running currently.
#"A" no correction,
#"B" median correction (default),
#"C" run Conumee
champ.padj                = 0.05, #padj to filter champ results
champ.control             = FALSE, #run champ.control etc.
champ.run.combat          = FALSE, #run champ.run.combat etc.
champ.run.dmp             = FALSE, #If only one pheno var must = FALSE
champ.run.dmr             = FALSE, #If only one pheno var must = FALSE
champ.run.block           = FALSE, #If only one pheno var must = FALSE
champ.run.gsea            = FALSE, #Requires dmp and dmr results
champ.run.epimod          = FALSE, #If only one pheno var must = FALSE
epi.run.gistic            = TRUE, #Whether to Run GISTIC in Epicopy workflow
olaps.split.field         = "Sample_ID", #Split field to ise during overlaps
#Don't change unless you know what
#you are doing
estimate.recurrence       = TRUE, #Estimate recursion to produce p values when
#finding overlaps with population_ranges
#functions
ov.pvalue                 = 0.05, #pvalue threshold for overlaps identified
ov.keep.extra.columns     = TRUE, #Keep extra metadata columns when finding
#overlaps
simplify.reduce           = weightedmean #Equation to use during reduction
)
devtools::load_all()
input.dir <- system.file("extdata",
package = 'MethylMasteR')
output.dir <- "C:\\Users\\Mike_2\\Desktop\\methyl_master_test"
sample.sheet.path <- system.file("extdata",
"Sample_Sheet_Test.csv",
package = 'MethylMasteR')
routine.run <- "sesame"
methyl_master(
routine                   = routine.run, #The routine to run
input.dir                 = input.dir, #The input (idat.files) directory
output.dir                = output.dir, #The output directory
sample.sheet.path         = sample.sheet.path, #The path to the MethylMasteR
#sample sheet
r.lib.path                = .libPaths()[1], #The path to the R Library path
file.sep                  = "\\\\", #For windows or "/" for Linux
create.dir                = TRUE, #Whether to cretae directory if does not
#exist?
save.seg                  = TRUE, #Whether to save segmentation results
n.cores                   = 1, #Multicore does not work for all routines
#on all operating systems
os.type                   = "windows", #Or "linux"
proj                      = "TCGA-KIRC", #"TCGA-BLCA" etc.
visualize                 = TRUE, #Whether to output plots,
visualize.individual      = FALSE, #Whether to output indvidual sample plots,
#only works for routine sesame
reference                 = "internal", #"comparison" or 'internal"
reference.name            = NA, #For Epicopy use NA for median,
#"all" is not currently supported
#by Epicopy
comparison                = c("tumor","normal"), #Always required treatment
#first then contro can also be more specific when
#designing sample sheet and use values like
# c("tumor_male","cord_male etc") etc.
#Note: in routines where internal reference is
#used, second argument is ignored
form.thresholds           = NULL, #Used to calculate final CNV state.
#If NULL, equation is is used;
#otherwise, specify threshold vector
#of lower and upper beta values such
#as c(-0.3,0.3),
overlap.density           = 0.1, #For combining final CNV calls for confidence
sesame.data.cache         = "EPIC", #The default sesame reference platform
sesame.data.normal        = 'EPIC.5.normal', #The default sesame and hm450
#internal reference samples
sesame.ref.version        = "hg19", #Or can set to "hg38"
hm450.workflow            = "B", #The HM450 subworkflow to use - only B
#is running currently.
#"A" no correction,
#"B" median correction (default),
#"C" run Conumee
champ.padj                = 0.05, #padj to filter champ results
champ.control             = FALSE, #run champ.control etc.
champ.run.combat          = FALSE, #run champ.run.combat etc.
champ.run.dmp             = FALSE, #If only one pheno var must = FALSE
champ.run.dmr             = FALSE, #If only one pheno var must = FALSE
champ.run.block           = FALSE, #If only one pheno var must = FALSE
champ.run.gsea            = FALSE, #Requires dmp and dmr results
champ.run.epimod          = FALSE, #If only one pheno var must = FALSE
epi.run.gistic            = TRUE, #Whether to Run GISTIC in Epicopy workflow
olaps.split.field         = "Sample_ID", #Split field to ise during overlaps
#Don't change unless you know what
#you are doing
estimate.recurrence       = TRUE, #Estimate recursion to produce p values when
#finding overlaps with population_ranges
#functions
ov.pvalue                 = 0.05, #pvalue threshold for overlaps identified
ov.keep.extra.columns     = TRUE, #Keep extra metadata columns when finding
#overlaps
simplify.reduce           = weightedmean #Equation to use during reduction
)
require(devtools)
devtools::install_github("mmariani123/MethylMasteR")
devtools::install_github("mmariani123/methylmaster")
devtools::install_github("mmariani123/methylmaster")
