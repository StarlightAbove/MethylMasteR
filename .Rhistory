n.cores              = 1,
os.type              = "windows",
proj                 = "TCGA-BLCA",
visualize            = TRUE,
visualize.individual = FALSE, ##Only works for routine sesame
routine              = "custom",
genome.version       = "hg19",
reference            = "internal", ##"comparison" or 'internal"
reference.name       = NA, ##NA for median, "all" For epicopy use,
##see below notes
comparison           = c("tumor","normal"),
form.thresholds      = c(-0.2,0.2), ##NULL c(-0.3,0.3),
save.seg             = TRUE,
sesame.data.cache    = "EPIC",
sesame.data.normal   = 'EPIC.5.normal',
##sesame.hm450.mean.correct = FALSE,
##sesame.form.add.meta = c("Tumor"), ##NULL
hm450.workflow       = "B",
champ.padj           = 0.05,
champ.control        = FALSE,
champ.run.combat     = FALSE,
champ.run.dmp        = FALSE, ##If only one pheno var must = FALSE
champ.run.dmr        = FALSE, ##If only one pheno var must = FALSE
champ.run.block      = FALSE, ##If only one pheno var must = FALSE
champ.run.gsea       = FALSE, ##Requires dmp and dmr results
champ.run.epimod     = FALSE, ##If only one pheno var must = FALSE
epi.run.gistic       = TRUE,
olaps.split.field    = "Sample_ID",
overlap.density      = 0.1,
estimate.recurrence  = TRUE,
ov.less.stringent.ra.setting = TRUE,
ov.pvalue            = 0.05,
ov.keep.extra.columns = TRUE,
simplify.reduce      = weightedmean
)
seg
devtools::load_all()
methyl_master(input.dir            = input.dir,
output.dir           = output.dir,
sample.sheet.path    = sample.sheet.path,
r.lib.path           = .libPaths()[1],
file.sep             = "\\\\",
create.dir           = TRUE,
n.cores              = 1,
os.type              = "windows",
proj                 = "TCGA-BLCA",
visualize            = TRUE,
visualize.individual = FALSE, ##Only works for routine sesame
routine              = "custom",
genome.version       = "hg19",
reference            = "internal", ##"comparison" or 'internal"
reference.name       = NA, ##NA for median, "all" For epicopy use,
##see below notes
comparison           = c("tumor","normal"),
form.thresholds      = c(-0.2,0.2), ##NULL c(-0.3,0.3),
save.seg             = TRUE,
sesame.data.cache    = "EPIC",
sesame.data.normal   = 'EPIC.5.normal',
##sesame.hm450.mean.correct = FALSE,
##sesame.form.add.meta = c("Tumor"), ##NULL
hm450.workflow       = "B",
champ.padj           = 0.05,
champ.control        = FALSE,
champ.run.combat     = FALSE,
champ.run.dmp        = FALSE, ##If only one pheno var must = FALSE
champ.run.dmr        = FALSE, ##If only one pheno var must = FALSE
champ.run.block      = FALSE, ##If only one pheno var must = FALSE
champ.run.gsea       = FALSE, ##Requires dmp and dmr results
champ.run.epimod     = FALSE, ##If only one pheno var must = FALSE
epi.run.gistic       = TRUE,
olaps.split.field    = "Sample_ID",
overlap.density      = 0.1,
estimate.recurrence  = TRUE,
ov.less.stringent.ra.setting = TRUE,
ov.pvalue            = 0.05,
ov.keep.extra.columns = TRUE,
simplify.reduce      = weightedmean
)
rm(list=ls())
input.dir <-
"G:\\My Drive\\dartmouth\\salas_lab\\cnv\\kirc_cbio_3p_select"
output.dir <-
"G:\\My Drive\\dartmouth\\salas_lab\\cnv\\kirc_3p_custom_internal_all"
sample.sheet.path <-
"G:\\My Drive\\dartmouth\\salas_lab\\cnv\\Sample_Sheet_kirc_cbio_3p_tum_cont.csv"
methyl_master(input.dir            = input.dir,
output.dir           = output.dir,
sample.sheet.path    = sample.sheet.path,
r.lib.path           = .libPaths()[1],
file.sep             = "\\\\",
create.dir           = TRUE,
n.cores              = 1,
os.type              = "windows",
proj                 = "TCGA-BLCA",
visualize            = TRUE,
visualize.individual = FALSE, ##Only works for routine sesame
routine              = "custom",
genome.version       = "hg19",
reference            = "internal", ##"comparison" or 'internal"
reference.name       = NA, ##NA for median, "all" For epicopy use,
##see below notes
comparison           = c("tumor","normal"),
form.thresholds      = c(-0.2,0.2), ##NULL c(-0.3,0.3),
save.seg             = TRUE,
sesame.data.cache    = "EPIC",
sesame.data.normal   = 'EPIC.5.normal',
##sesame.hm450.mean.correct = FALSE,
##sesame.form.add.meta = c("Tumor"), ##NULL
hm450.workflow       = "B",
champ.padj           = 0.05,
champ.control        = FALSE,
champ.run.combat     = FALSE,
champ.run.dmp        = FALSE, ##If only one pheno var must = FALSE
champ.run.dmr        = FALSE, ##If only one pheno var must = FALSE
champ.run.block      = FALSE, ##If only one pheno var must = FALSE
champ.run.gsea       = FALSE, ##Requires dmp and dmr results
champ.run.epimod     = FALSE, ##If only one pheno var must = FALSE
epi.run.gistic       = TRUE,
olaps.split.field    = "Sample_ID",
overlap.density      = 0.1,
estimate.recurrence  = TRUE,
ov.less.stringent.ra.setting = TRUE,
ov.pvalue            = 0.05,
ov.keep.extra.columns = TRUE,
simplify.reduce      = weightedmean
)
devtools::load_all()
input.dir <-
"G:\\My Drive\\dartmouth\\salas_lab\\cnv\\kirc_cbio_3p_select"
output.dir <-
"G:\\My Drive\\dartmouth\\salas_lab\\cnv\\kirc_3p_custom_internal_all"
sample.sheet.path <-
"G:\\My Drive\\dartmouth\\salas_lab\\cnv\\Sample_Sheet_kirc_cbio_3p_tum_cont.csv"
methyl_master(input.dir            = input.dir,
output.dir           = output.dir,
sample.sheet.path    = sample.sheet.path,
r.lib.path           = .libPaths()[1],
file.sep             = "\\\\",
create.dir           = TRUE,
n.cores              = 1,
os.type              = "windows",
proj                 = "TCGA-BLCA",
visualize            = TRUE,
visualize.individual = FALSE, ##Only works for routine sesame
routine              = "custom",
genome.version       = "hg19",
reference            = "internal", ##"comparison" or 'internal"
reference.name       = NA, ##NA for median, "all" For epicopy use,
##see below notes
comparison           = c("tumor","normal"),
form.thresholds      = c(-0.2,0.2), ##NULL c(-0.3,0.3),
save.seg             = TRUE,
sesame.data.cache    = "EPIC",
sesame.data.normal   = 'EPIC.5.normal',
##sesame.hm450.mean.correct = FALSE,
##sesame.form.add.meta = c("Tumor"), ##NULL
hm450.workflow       = "B",
champ.padj           = 0.05,
champ.control        = FALSE,
champ.run.combat     = FALSE,
champ.run.dmp        = FALSE, ##If only one pheno var must = FALSE
champ.run.dmr        = FALSE, ##If only one pheno var must = FALSE
champ.run.block      = FALSE, ##If only one pheno var must = FALSE
champ.run.gsea       = FALSE, ##Requires dmp and dmr results
champ.run.epimod     = FALSE, ##If only one pheno var must = FALSE
epi.run.gistic       = TRUE,
olaps.split.field    = "Sample_ID",
overlap.density      = 0.1,
estimate.recurrence  = TRUE,
ov.less.stringent.ra.setting = TRUE,
ov.pvalue            = 0.05,
ov.keep.extra.columns = TRUE,
simplify.reduce      = weightedmean
)
input.dir <-
"G:\\My Drive\\dartmouth\\salas_lab\\cnv\\kirc_cbio_3p_select"
output.dir <-
"G:\\My Drive\\dartmouth\\salas_lab\\cnv\\kirc_3p_champ_internal_all"
sample.sheet.path <-
"G:\\My Drive\\dartmouth\\salas_lab\\cnv\\Sample_Sheet_kirc_cbio_3p_tum_cont.csv"
methyl_master(input.dir            = input.dir,
output.dir           = output.dir,
sample.sheet.path    = sample.sheet.path,
r.lib.path           = .libPaths()[1],
file.sep             = "\\\\",
create.dir           = TRUE,
n.cores              = 1,
os.type              = "windows",
proj                 = "TCGA-BLCA",
visualize            = TRUE,
visualize.individual = FALSE, ##Only works for routine sesame
routine              = "champ",
genome.version       = "hg19",
reference            = "internal", ##"comparison" or 'internal"
reference.name       = NA, ##NA for median, "all" For epicopy use,
##see below notes
comparison           = c("tumor","normal"),
form.thresholds      = c(-0.2,0.2), ##NULL c(-0.3,0.3),
save.seg             = TRUE,
sesame.data.cache    = "EPIC",
sesame.data.normal   = 'EPIC.5.normal',
##sesame.hm450.mean.correct = FALSE,
##sesame.form.add.meta = c("Tumor"), ##NULL
hm450.workflow       = "B",
champ.padj           = 0.05,
champ.control        = FALSE,
champ.run.combat     = FALSE,
champ.run.dmp        = FALSE, ##If only one pheno var must = FALSE
champ.run.dmr        = FALSE, ##If only one pheno var must = FALSE
champ.run.block      = FALSE, ##If only one pheno var must = FALSE
champ.run.gsea       = FALSE, ##Requires dmp and dmr results
champ.run.epimod     = FALSE, ##If only one pheno var must = FALSE
epi.run.gistic       = TRUE,
olaps.split.field    = "Sample_ID",
overlap.density      = 0.1,
estimate.recurrence  = TRUE,
ov.less.stringent.ra.setting = TRUE,
ov.pvalue            = 0.05,
ov.keep.extra.columns = TRUE,
simplify.reduce      = weightedmean
)
methyl_master(input.dir            = input.dir,
output.dir           = output.dir,
sample.sheet.path    = sample.sheet.path,
r.lib.path           = .libPaths()[1],
file.sep             = "\\\\",
create.dir           = TRUE,
n.cores              = 1,
os.type              = "windows",
proj                 = "TCGA-BLCA",
visualize            = TRUE,
visualize.individual = FALSE, ##Only works for routine sesame
routine              = "champ",
genome.version       = "hg19",
reference            = "internal", ##"comparison" or 'internal"
reference.name       = NA, ##NA for median, "all" For epicopy use,
##see below notes
comparison           = c("tumor","normal"),
form.thresholds      = c(-0.2,0.2), ##NULL c(-0.3,0.3),
save.seg             = TRUE,
sesame.data.cache    = "EPIC",
sesame.data.normal   = 'EPIC.5.normal',
##sesame.hm450.mean.correct = FALSE,
##sesame.form.add.meta = c("Tumor"), ##NULL
hm450.workflow       = "B",
champ.padj           = 0.05,
champ.control        = FALSE,
champ.run.combat     = FALSE,
champ.run.dmp        = FALSE, ##If only one pheno var must = FALSE
champ.run.dmr        = FALSE, ##If only one pheno var must = FALSE
champ.run.block      = FALSE, ##If only one pheno var must = FALSE
champ.run.gsea       = FALSE, ##Requires dmp and dmr results
champ.run.epimod     = FALSE, ##If only one pheno var must = FALSE
epi.run.gistic       = TRUE,
olaps.split.field    = "Sample_ID",
overlap.density      = 0.1,
estimate.recurrence  = TRUE,
ov.less.stringent.ra.setting = TRUE,
ov.pvalue            = 0.05,
ov.keep.extra.columns = TRUE,
simplify.reduce      = weightedmean
)
devtools::load_all()
input.dir <-
"G:\\My Drive\\dartmouth\\salas_lab\\cnv\\kirc_cbio_3p_select"
output.dir <-
"G:\\My Drive\\dartmouth\\salas_lab\\cnv\\kirc_3p_champ_internal_all"
sample.sheet.path <-
"G:\\My Drive\\dartmouth\\salas_lab\\cnv\\Sample_Sheet_kirc_cbio_3p_tum_cont.csv"
methyl_master(input.dir            = input.dir,
output.dir           = output.dir,
sample.sheet.path    = sample.sheet.path,
r.lib.path           = .libPaths()[1],
file.sep             = "\\\\",
create.dir           = TRUE,
n.cores              = 1,
os.type              = "windows",
proj                 = "TCGA-BLCA",
visualize            = TRUE,
visualize.individual = FALSE, ##Only works for routine sesame
routine              = "champ",
genome.version       = "hg19",
reference            = "internal", ##"comparison" or 'internal"
reference.name       = NA, ##NA for median, "all" For epicopy use,
##see below notes
comparison           = c("tumor","normal"),
form.thresholds      = c(-0.2,0.2), ##NULL c(-0.3,0.3),
save.seg             = TRUE,
sesame.data.cache    = "EPIC",
sesame.data.normal   = 'EPIC.5.normal',
##sesame.hm450.mean.correct = FALSE,
##sesame.form.add.meta = c("Tumor"), ##NULL
hm450.workflow       = "B",
champ.padj           = 0.05,
champ.control        = FALSE,
champ.run.combat     = FALSE,
champ.run.dmp        = FALSE, ##If only one pheno var must = FALSE
champ.run.dmr        = FALSE, ##If only one pheno var must = FALSE
champ.run.block      = FALSE, ##If only one pheno var must = FALSE
champ.run.gsea       = FALSE, ##Requires dmp and dmr results
champ.run.epimod     = FALSE, ##If only one pheno var must = FALSE
epi.run.gistic       = TRUE,
olaps.split.field    = "Sample_ID",
overlap.density      = 0.1,
estimate.recurrence  = TRUE,
ov.less.stringent.ra.setting = TRUE,
ov.pvalue            = 0.05,
ov.keep.extra.columns = TRUE,
simplify.reduce      = weightedmean
)
library(sesame)
library(Seurat)
?Seurat::NormalizeData
library(GenomicRanges)
citation("GenomicRanges")
library(populationranges)
library(populationTanges)
library(populationRanges)
CNVRanger
library(CNVRanger)
populationRanges
citation(populationRanges)
citation("populationRanges")
citation("CNVRanger")
CNVRanger::populationRanges()
CNVRanger::populationRanges
citation("peakRAM")
citation("GenomicRanges")
library(conumee)
citation("conumee")
library(DNAcopy)
citation("DNAcopy")
devtools::load_all()
devtools::test_active_file()
rlang::last_error()
Sys.getenv("R_FS_HOME")
Sys.getenv("HOME")
Sys.getenv("R_FS_HOME") <- "C:/Users/Mike/Documents"
Sys.getenv("R_FS_HOME") <- Sys.getenv("HOME")
Sys.setenv("R_FS_HOME") <- Sys.getenv("HOME")
Sys.setenv("R_FS_HOME") <- "C:/Users/Mike/Documents"
?Sys.setenv()
?Sys.setenv(R_FS_HOME) <- "C:/Users/Mike/Documents"
devtools::test_active_file()
Sys.getenv("R_FS_HOME")
Sys.getenv("R_FS_HOME")
Sys.setenv(R_FS_HOME,"C:/Users/Mike/Documents")
devtools::install_github("r-lib/devtools")
library(devtools)
devtools::test_active_file()
devtools::install_github("malcolmbarrett/devtools")
detach("package:devtools,unlink=TRUE")
detach("package:devtools",unlink=TRUE)
detach("package:devtools",detach=TRUE)
?detach
detach("package:devtools", unload=TRUE)
devtools::install_github("malcolmbarrett/devtools")
library(devtools)
devtools::load_all()
devtools::test_active_file()
devtools::test_file()
rlang::last_error()
Sys.setenv(R_FS_HOME,getwd())
devtools::test()
devtools::test()
rlang::last_error()
devtools::test()
rlang::last_error()
rlang::last_trace()
devtools::test()
getwd()
devtools::test("C:/Users/Mike/Desktop/github/MethylMasteR/tests/methyl_master_testing")
devtools::test("C:/Users/Mike/Desktop/github/MethylMasteR/tests/methyl_master_testing.R")
devtools::test("C:/Users/Mike/Desktop/github/MethylMasteR/tests")
rlang::last_error()
devtools::test_coverage()
devtools::test()
devtools::test_file()
devtools::test_file()
devtools::test_file()
devtools::load_all()
devtools::test_file()
devtools::test()
devtools::load_all()
devtools::test()
devtools::test_file()
devtools::test()
warnigns()
warnings()
usethis::use_test("mm_testing")
devtools::test_file()
devtools::load_all()
devtools::test_file()
devtools::test_file()
devtools::load_all()
devtools::test_file()
devtools::load_all()
devtools::test_file()
print(getwd())
devtools::laod
devtools::load_all()
devtools::test_file()
if(run.discovery==TRUE){
args <- commandArgs(trailingOnly = TRUE)
.libPaths("/dartfs/rc/lab/S/SalasLab/R/x86_64-pc-linux-gnu-library/4.0")
work.dir <- args[1]
file.sep <- "/"
annotations.file <-
paste0(work.dir,
file.sep,
"infercnv_sample_annotation_file.txt")
gene.order.file <-
paste0("/dartfs/rc/lab/S/SalasLab",
"/CCRCC_sc/Raw_data/",
"gencode_v21_gen_pos.complete.txt")
}else{
work.dir <-
paste0("G:\\My Drive\\dartmouth",
"\\salas_lab_working\\sc",
"\\single_cell_mo")
file.sep <- "\\\\"
annotations.file <-
paste0(work.dir,file.sep,"infercnv_sample_annotation_file.txt")
gene.order.file <-
"C:\\Users\\Mike\\Desktop\\gencode_v21_gen_pos.complete.txt"
}
##run.discovery==TRUE
run.discovery==FALSE
if(run.discovery==TRUE){
args <- commandArgs(trailingOnly = TRUE)
.libPaths("/dartfs/rc/lab/S/SalasLab/R/x86_64-pc-linux-gnu-library/4.0")
work.dir <- args[1]
file.sep <- "/"
annotations.file <-
paste0(work.dir,
file.sep,
"infercnv_sample_annotation_file.txt")
gene.order.file <-
paste0("/dartfs/rc/lab/S/SalasLab",
"/CCRCC_sc/Raw_data/",
"gencode_v21_gen_pos.complete.txt")
}else{
work.dir <-
paste0("G:\\My Drive\\dartmouth",
"\\salas_lab_working\\sc",
"\\single_cell_mo")
file.sep <- "\\\\"
annotations.file <-
paste0(work.dir,file.sep,"infercnv_sample_annotation_file.txt")
gene.order.file <-
"C:\\Users\\Mike\\Desktop\\gencode_v21_gen_pos.complete.txt"
}
##run.discovery<-TRUE
run.discovery<-FALSE
if(run.discovery==TRUE){
args <- commandArgs(trailingOnly = TRUE)
.libPaths("/dartfs/rc/lab/S/SalasLab/R/x86_64-pc-linux-gnu-library/4.0")
work.dir <- args[1]
file.sep <- "/"
annotations.file <-
paste0(work.dir,
file.sep,
"infercnv_sample_annotation_file.txt")
gene.order.file <-
paste0("/dartfs/rc/lab/S/SalasLab",
"/CCRCC_sc/Raw_data/",
"gencode_v21_gen_pos.complete.txt")
}else{
work.dir <-
paste0("G:\\My Drive\\dartmouth",
"\\salas_lab_working\\sc",
"\\single_cell_mo")
file.sep <- "\\\\"
annotations.file <-
paste0(work.dir,file.sep,"infercnv_sample_annotation_file.txt")
gene.order.file <-
"C:\\Users\\Mike\\Desktop\\gencode_v21_gen_pos.complete.txt"
}
##Load my tumor MO data
load(paste0(work.dir,
file.sep,
"mo.obj.filt.norm.RData"))
library(Matrix)
library(infercnv)
##run.discovery<-TRUE
run.discovery<-FALSE
if(run.discovery==TRUE){
args <- commandArgs(trailingOnly = TRUE)
.libPaths("/dartfs/rc/lab/S/SalasLab/R/x86_64-pc-linux-gnu-library/4.0")
work.dir <- args[1]
file.sep <- "/"
annotations.file <-
paste0(work.dir,
file.sep,
"infercnv_sample_annotation_file.txt")
gene.order.file <-
paste0("/dartfs/rc/lab/S/SalasLab",
"/CCRCC_sc/Raw_data/",
"gencode_v21_gen_pos.complete.txt")
}else{
work.dir <-
paste0("G:\\My Drive\\dartmouth\\salas_lab\\sc\\sc\\single_cell_mo")
file.sep <- "\\\\"
annotations.file <-
paste0(work.dir,
.Platform$file.sep,
"infercnv_sample_annotation_file.txt")
gene.order.file <-
paste0(work.dir,
.Platform$file.sep,
"gencode_v21_gen_pos.complete.txt")
}
