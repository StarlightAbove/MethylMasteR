rev.count.olaps.normal <- countOverlaps(stand.normal.gr[[i]],
test.gr[[i]],
minoverlap=min.overlap)
rev.length.olaps.normal <-
length(rev.count.olaps.normal[rev.count.olaps.normal!=0])
}, error = function(e){
rev.count.olaps.normal <- 0
rev.length.olaps.normal <- 0
})
tryCatch(
{rev.count.olaps <- countOverlaps(stand.gr[[i]],
test.gr[[i]],
minoverlap=min.overlap)
rev.length.olaps <- length(rev.count.olaps[rev.count.olaps!=0])
},error = function(e){
rev.count.olaps <- 0
rev.length.olaps <- 0
})
tryCatch(
{all.inter <-
nrow(subset(S4Vectors::mcols(
seqsetvis::ssvOverlapIntervalSets(list(test.gr[[i]],
stand.gr[[i]],
stand.normal.gr[[i]]),
minoverlap=min.overlap)),
(set_A==TRUE & set_B==TRUE & set_C==TRUE)))
}, error = function(e){
all.inter <- 0
})
tn <- rev.length.olaps.normal
##tp <- rev.length.olaps - rev.length.olaps.normal
tp <- rev.length.olaps - all.inter
#total <- length(ranges(union(stand.gr, stand.normal.gr)))
tryCatch(
{
total <-
(total.stand.normal +
total.stand) -
nrow(subset(S4Vectors::mcols(
seqsetvis::ssvOverlapIntervalSets(list(stand.gr[[i]],
stand.normal.gr[[i]]),
minoverlap=min.overlap)),
(set_A==TRUE & set_B==TRUE)))
}, error = function(e){
total <- total.stand.normal + total.stand
})
acc <- (tp + tn) / total
acc.out <- c(routine, ints[i], acc)
accs[[i]] <- acc.out
}
return(do.call(rbind,accs))
}
##min.olap.n    <- median(standard.n$End - standard.n$Start)/2
acc.sesame.n  <- calc_acc_2(sesame.gr.n,
standard.gr.n,
standard.normal.gr.n,
min.overlap=min.olap.n,
routine="sesame_neutral",
median.val=NULL)
debug(calc_cc_2)
debug(calc_acc_2)
##min.olap.n    <- median(standard.n$End - standard.n$Start)/2
acc.sesame.n  <- calc_acc_2(sesame.gr.n,
standard.gr.n,
standard.normal.gr.n,
min.overlap=min.olap.n,
routine="sesame_neutral",
median.val=NULL)
calc_acc_2 <- function(test.gr,
stand.gr,
stand.normal.gr,
min.overlap=1L,
routine,
median.val=NULL){
#Original way:
ints.s  <- intersect(names(test.gr), names(stand.gr))
ints.sn <- intersect(names(test.gr), names(stand.normal.gr))
test.gr         <- test.gr[c(ints.s,ints.sn)]
stand.gr        <- stand.gr[ints.s]
stand.normal.gr <- stand.normal.gr[ints.sn]
##print(names(test.gr))
##print(names(stand.gr))
accs <- list()
for(i in 1:(length(ints.s)+length(ints.sn))){
length.rows  <- length(ranges(test.gr[[i]]))
if(length.rows==0){
stop("Error empty granges for overlapping")
}
total.stand.normal <- tryCatch(
{length(ranges(stand.normal.gr[[i]]))},
error = function(e){
0})
total.stand  <- tryCatch(
{length(ranges(stand.gr[[i]]))},
error = function(e){
0
})
tryCatch(
{
rev.count.olaps.normal <<- countOverlaps(stand.normal.gr[[i]],
test.gr[[i]],
minoverlap=min.overlap)
rev.length.olaps.normal <<-
length(rev.count.olaps.normal[rev.count.olaps.normal!=0])
}, error = function(e){
rev.count.olaps.normal <<- 0
rev.length.olaps.normal <<- 0
})
tryCatch(
{rev.count.olaps <<- countOverlaps(stand.gr[[i]],
test.gr[[i]],
minoverlap=min.overlap)
rev.length.olaps <<- length(rev.count.olaps[rev.count.olaps!=0])
},error = function(e){
rev.count.olaps <<- 0
rev.length.olaps <<- 0
})
tryCatch(
{all.inter <<-
nrow(subset(S4Vectors::mcols(
seqsetvis::ssvOverlapIntervalSets(list(test.gr[[i]],
stand.gr[[i]],
stand.normal.gr[[i]]),
minoverlap=min.overlap)),
(set_A==TRUE & set_B==TRUE & set_C==TRUE)))
}, error = function(e){
all.inter <<- 0
})
tn <- rev.length.olaps.normal
##tp <- rev.length.olaps - rev.length.olaps.normal
tp <- rev.length.olaps - all.inter
#total <- length(ranges(union(stand.gr, stand.normal.gr)))
tryCatch(
{
total <<-
(total.stand.normal +
total.stand) -
nrow(subset(S4Vectors::mcols(
seqsetvis::ssvOverlapIntervalSets(list(stand.gr[[i]],
stand.normal.gr[[i]]),
minoverlap=min.overlap)),
(set_A==TRUE & set_B==TRUE)))
}, error = function(e){
total <<- total.stand.normal + total.stand
})
acc <- (tp + tn) / total
acc.out <- c(routine, ints[i], acc)
accs[[i]] <- acc.out
}
return(do.call(rbind,accs))
}
##min.olap.n    <- median(standard.n$End - standard.n$Start)/2
acc.sesame.n  <- calc_acc_2(sesame.gr.n,
standard.gr.n,
standard.normal.gr.n,
min.overlap=min.olap.n,
routine="sesame_neutral",
median.val=NULL)
debug(calc_acc_2)
##min.olap.n    <- median(standard.n$End - standard.n$Start)/2
acc.sesame.n  <- calc_acc_2(sesame.gr.n,
standard.gr.n,
standard.normal.gr.n,
min.overlap=min.olap.n,
routine="sesame_neutral",
median.val=NULL)
calc_acc_2 <- function(test.gr,
stand.gr,
stand.normal.gr,
min.overlap=1L,
routine,
median.val=NULL){
#Original way:
ints.s  <- intersect(names(test.gr), names(stand.gr))
ints.sn <- intersect(names(test.gr), names(stand.normal.gr))
test.gr         <- test.gr[c(ints.s,ints.sn)]
stand.gr        <- stand.gr[ints.s]
stand.normal.gr <- stand.normal.gr[ints.sn]
##print(names(test.gr))
##print(names(stand.gr))
accs <- list()
ints.total <- c(ints.s,ints.sn)
for(i in 1:length(ints.total)){
length.rows  <- length(ranges(test.gr[[i]]))
if(length.rows==0){
stop("Error empty granges for overlapping")
}
total.stand.normal <- tryCatch(
{length(ranges(stand.normal.gr[[i]]))},
error = function(e){
0})
total.stand  <- tryCatch(
{length(ranges(stand.gr[[i]]))},
error = function(e){
0
})
tryCatch(
{
rev.count.olaps.normal <<- countOverlaps(stand.normal.gr[[i]],
test.gr[[i]],
minoverlap=min.overlap)
rev.length.olaps.normal <<-
length(rev.count.olaps.normal[rev.count.olaps.normal!=0])
}, error = function(e){
rev.count.olaps.normal <<- 0
rev.length.olaps.normal <<- 0
})
tryCatch(
{rev.count.olaps <<- countOverlaps(stand.gr[[i]],
test.gr[[i]],
minoverlap=min.overlap)
rev.length.olaps <<- length(rev.count.olaps[rev.count.olaps!=0])
},error = function(e){
rev.count.olaps <<- 0
rev.length.olaps <<- 0
})
tryCatch(
{all.inter <<-
nrow(subset(S4Vectors::mcols(
seqsetvis::ssvOverlapIntervalSets(list(test.gr[[i]],
stand.gr[[i]],
stand.normal.gr[[i]]),
minoverlap=min.overlap)),
(set_A==TRUE & set_B==TRUE & set_C==TRUE)))
}, error = function(e){
all.inter <<- 0
})
tn <- rev.length.olaps.normal
##tp <- rev.length.olaps - rev.length.olaps.normal
tp <- rev.length.olaps - all.inter
#total <- length(ranges(union(stand.gr, stand.normal.gr)))
tryCatch(
{
total <<-
(total.stand.normal +
total.stand) -
nrow(subset(S4Vectors::mcols(
seqsetvis::ssvOverlapIntervalSets(list(stand.gr[[i]],
stand.normal.gr[[i]]),
minoverlap=min.overlap)),
(set_A==TRUE & set_B==TRUE)))
}, error = function(e){
total <<- total.stand.normal + total.stand
})
acc <- (tp + tn) / total
acc.out <- c(routine, ints[i], acc)
accs[[i]] <- acc.out
}
return(do.call(rbind,accs))
}
calc_acc_2 <- function(test.gr,
stand.gr,
stand.normal.gr,
min.overlap=1L,
routine,
median.val=NULL){
#Original way:
ints.s  <- intersect(names(test.gr), names(stand.gr))
ints.sn <- intersect(names(test.gr), names(stand.normal.gr))
test.gr         <- test.gr[c(ints.s,ints.sn)]
stand.gr        <- stand.gr[ints.s]
stand.normal.gr <- stand.normal.gr[ints.sn]
##print(names(test.gr))
##print(names(stand.gr))
accs <- list()
ints.total <- c(ints.s,ints.sn)
for(i in 1:length(ints.total)){
length.rows  <- length(ranges(test.gr[[i]]))
if(length.rows==0){
stop("Error empty granges for overlapping")
}
total.stand.normal <- tryCatch(
{length(ranges(stand.normal.gr[[i]]))},
error = function(e){
0})
total.stand  <- tryCatch(
{length(ranges(stand.gr[[i]]))},
error = function(e){
0
})
tryCatch(
{
rev.count.olaps.normal <<- countOverlaps(stand.normal.gr[[i]],
test.gr[[i]],
minoverlap=min.overlap)
rev.length.olaps.normal <<-
length(rev.count.olaps.normal[rev.count.olaps.normal!=0])
}, error = function(e){
rev.count.olaps.normal <<- 0
rev.length.olaps.normal <<- 0
})
tryCatch(
{rev.count.olaps <<- countOverlaps(stand.gr[[i]],
test.gr[[i]],
minoverlap=min.overlap)
rev.length.olaps <<- length(rev.count.olaps[rev.count.olaps!=0])
},error = function(e){
rev.count.olaps <<- 0
rev.length.olaps <<- 0
})
tryCatch(
{all.inter <<-
nrow(subset(S4Vectors::mcols(
seqsetvis::ssvOverlapIntervalSets(list(test.gr[[i]],
stand.gr[[i]],
stand.normal.gr[[i]]),
minoverlap=min.overlap)),
(set_A==TRUE & set_B==TRUE & set_C==TRUE)))
}, error = function(e){
all.inter <<- 0
})
tn <- rev.length.olaps.normal
##tp <- rev.length.olaps - rev.length.olaps.normal
tp <- rev.length.olaps - all.inter
#total <- length(ranges(union(stand.gr, stand.normal.gr)))
tryCatch(
{
total <<-
(total.stand.normal +
total.stand) -
nrow(subset(S4Vectors::mcols(
seqsetvis::ssvOverlapIntervalSets(list(stand.gr[[i]],
stand.normal.gr[[i]]),
minoverlap=min.overlap)),
(set_A==TRUE & set_B==TRUE)))
}, error = function(e){
total <<- total.stand.normal + total.stand
})
acc <- (tp + tn) / total
acc.out <- c(routine, ints.total[i], acc)
accs[[i]] <- acc.out
}
return(do.call(rbind,accs))
}
##min.olap.n    <- median(standard.n$End - standard.n$Start)/2
acc.sesame.n  <- calc_acc_2(sesame.gr.n,
standard.gr.n,
standard.normal.gr.n,
min.overlap=min.olap.n,
routine="sesame_neutral",
median.val=NULL)
##min.olap.n    <- median(standard.n$End - standard.n$Start)/2
acc.sesame.n  <- calc_acc_2(sesame.gr.n,
standard.gr.n,
standard.normal.gr.n,
min.overlap=min.olap.n,
routine="sesame_neutral",
median.val=NULL)
acc.hm450.n   <- calc_acc_2(hm450.gr.n,
standard.gr.n,
standard.normal.gr.n,
min.overlap=min.olap.n,
routine="hm450_neutral",
median.val=NULL)
acc.champ.n   <- calc_acc_2(champ.gr.n,
standard.gr.n,
standard.normal.gr.n,
min.overlap=min.olap.n,
routine="champ_neutral",
median.val=NULL)
acc.epicopy.n <- calc_acc_2(epicopy.gr.n,
standard.gr.n,
standard.normal.gr.n,
min.overlap=min.olap.n,
routine="epicopy_neutral",
median.val=NULL)
acc.custom.n  <- calc_acc_2(custom.gr.n,
standard.gr.n,
standard.normal.gr.n,
min.overlap=min.olap.n,
routine="custom_neutral",
median.val=NULL)
min.olap.g <- 1
##min.olap.g    <- median(standard.g$End - standard.g$Start)/2
acc.sesame.g  <- calc_acc_2(sesame.gr.g,
standard.gr.g,
standard.normal.gr.g,
min.overlap=min.olap.g,
routine="sesame_gain",
median.val=NULL)
acc.hm450.g   <- calc_acc_2(hm450.gr.g,
standard.gr.g,
standard.normal.gr.g,
min.overlap=min.olap.g,
routine="hm450_gain",
median.val=NULL)
acc.champ.g   <- calc_acc_2(champ.gr.g,
standard.gr.g,
standard.normal.gr.g,
min.overlap=min.olap.g,
routine="champ_gain",
median.val=NULL)
acc.epicopy.g <- calc_acc_2(epicopy.gr.g,
standard.gr.g,
standard.normal.gr.g,
min.overlap=min.olap.g,
routine="epicopy_gain",
median.val=NULL)
acc.custom.g  <- calc_acc_2(custom.gr.g,
standard.gr.g,
standard.normal.gr.g,
min.overlap=min.olap.g,
routine="custom_gain",
median.val=NULL)
min.olap.l <- 1
##min.olap.l    <- median(standard.l$End - standard.l$Start)/2
acc.sesame.l  <- calc_acc_2(sesame.gr.l,
standard.gr.l,
standard.normal.gr.l,
min.overlap = min.olap.l,
routine="sesame_loss",
median.val=NULL)
acc.hm450.l   <- calc_acc_2(hm450.gr.l,
standard.gr.l,
standard.normal.gr.l,
min.overlap = min.olap.l,
routine="hm450_loss",
median.val=NULL)
acc.champ.l   <- calc_acc_2(champ.gr.l,
standard.gr.l,
standard.normal.gr.l,
min.overlap = min.olap.l,
routine="champ_loss",
median.val=NULL)
acc.epicopy.l <- calc_acc_2(epicopy.gr.l,
standard.gr.l,
standard.normal.gr.l,
min.overlap = min.olap.l,
routine="epicopy_loss",
median.val=NULL)
acc.custom.l  <- calc_acc_2(custom.gr.l,
standard.gr.l,
standard.normal.gr.l,
min.overlap = min.olap.l,
routine="custom_loss",
median.val=NULL)
acc.mat <- do.call(rbind,
list(acc.sesame.n,
acc.hm450.n,
acc.champ.n,
acc.epicopy.n,
acc.custom.n,
acc.sesame.g,
acc.hm450.g,
acc.champ.g,
acc.epicopy.g,
acc.custom.g,
acc.sesame.l,
acc.hm450.l,
acc.champ.l,
acc.epicopy.l,
acc.custom.l))
acc.df <- as.data.frame(acc.mat)
colnames(acc.df) <- c("group", "sample", "accuracy")
acc.df$state <- ""
acc.df[grepl("neutral",acc.df$group),"state"] <- "neutral"
acc.df[grepl("gain",acc.df$group),   "state"] <- "gain"
acc.df[grepl("loss",acc.df$group),   "state"] <- "loss"
acc.df$state <- factor(acc.df$state)
acc.df$routine <- ""
acc.df[grepl("sesame",  acc.df$group), "routine"] <- "sesame"
acc.df[grepl("hm450",   acc.df$group), "routine"] <- "hm450"
acc.df[grepl("champ",   acc.df$group), "routine"] <- "champ"
acc.df[grepl("epicopy", acc.df$group), "routine"] <- "epicopy"
acc.df[grepl("custom",  acc.df$group), "routine"] <- "custom"
acc.df$routine <- factor(acc.df$routine, levels = c("sesame",
"hm450",
"champ",
"epicopy",
"custom"))
acc.plot <- ggplot(acc.df,aes(x=routine,y=as.numeric(accuracy),fill=state)) +
geom_boxplot() +
theme_bw() +
ylab("Accuracy") +
xlab("Routine") +
scale_fill_manual(values = c("blue", "orange", "gray"))
ggsave(acc.plot,
file=paste0(output.dir,.Platform$file.sep,"accuracy.plot.pdf"),
height=,
width=8,
device="pdf")
write.table(acc.df,
file=paste0(output.dir,.Platform$file.sep,"accuracy.table.csv"),
row.names = FALSE,
quote = FALSE,
sep=",")
ggsave(acc.plot,
file=paste0(output.dir,.Platform$file.sep,"accuracy.plot.pdf"),
height=8,
width=8,
device="pdf")
ggsave(acc.plot,
file=paste0(output.dir,.Platform$file.sep,"accuracy.plot.pdf"),
height=8,
width=8,
device="pdf")
output.dir
ggsave(acc.plot,
file=paste0(output.dir,.Platform$file.sep,"accuracy.plot.pdf"),
height=6,
width=8,
device="pdf")
ggsave(acc.plot,
file=paste0(output.dir,.Platform$file.sep,"accuracy.plot.pdf"),
height=4,
width=8,
device="pdf")
ggsave(acc.plot,
file=paste0(output.dir,.Platform$file.sep,"accuracy.plot.pdf"),
height=2,
width=8,
device="pdf")
