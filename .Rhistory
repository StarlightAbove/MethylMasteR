proj                 = "TCGA-BLCA",
visualize            = FALSE,
visualize.individual = FALSE,
weighted.mean        = "normal",
routine              = "k450",
reference            = NULL,
reference.name       = NULL,
split.by             = "gender_reported",
comparisons          = c("tumor","normal"),
epi.run.gistic = TRUE
)
devtools::load_all()
debug(methyl_master_k450)
methyl_master(main.dir = paste0("G:\\My Drive",
"\\dartmouth",
"\\salas_lab_working",
"\\cnv\\testing"),
output.dir = paste0("G:\\My Drive",
"\\dartmouth",
"\\salas_lab_working",
"\\cnv\\testing\\epicopy"),
n.cores = 1,
os.type = "linux",
sample.sheet.path = paste0("G:\\My Drive\\dartmouth",
"\\salas_lab_working\\cnv",
"\\Sample_Sheet_testing.csv"),
idat.files.dir = paste0("G:\\My Drive",
"\\dartmouth\\salas_lab_working",
"\\cnv\\blca_idat_files_testing"),
r.lib.path           = .libPaths()[1],
proj                 = "TCGA-BLCA",
visualize            = FALSE,
visualize.individual = FALSE,
weighted.mean        = "normal",
routine              = "k450",
reference            = NULL,
reference.name       = NULL,
split.by             = "gender_reported",
comparisons          = c("tumor","normal"),
epi.run.gistic = TRUE
)
devtools::load_all()
debug(methyl_master_k450)
methyl_master(main.dir = paste0("G:\\My Drive",
"\\dartmouth",
"\\salas_lab_working",
"\\cnv\\testing"),
work.dir = paste0("G:\\My Drive",
"\\dartmouth",
"\\salas_lab_working",
"\\cnv\\testing\\k450_work")
output.dir = paste0("G:\\My Drive",
"\\dartmouth",
"\\salas_lab_working",
"\\cnv\\testing\\k450_output"),
n.cores = 1,
os.type = "linux",
sample.sheet.path = paste0("G:\\My Drive\\dartmouth",
"\\salas_lab_working\\cnv",
"\\Sample_Sheet_testing.csv"),
idat.files.dir = paste0("G:\\My Drive",
"\\dartmouth\\salas_lab_working",
"\\cnv\\blca_idat_files_testing"),
r.lib.path           = .libPaths()[1],
proj                 = "TCGA-BLCA",
visualize            = FALSE,
visualize.individual = FALSE,
weighted.mean        = "normal",
routine              = "k450",
reference            = NULL,
reference.name       = NULL,
split.by             = "gender_reported",
comparisons          = c("tumor","normal"),
epi.run.gistic = TRUE
)
methyl_master(main.dir = paste0("G:\\My Drive",
"\\dartmouth",
"\\salas_lab_working",
"\\cnv\\testing"),
work.dir = paste0("G:\\My Drive",
"\\dartmouth",
"\\salas_lab_working",
"\\cnv\\testing\\k450_work"),
output.dir = paste0("G:\\My Drive",
"\\dartmouth",
"\\salas_lab_working",
"\\cnv\\testing\\k450_output"),
n.cores = 1,
os.type = "linux",
sample.sheet.path = paste0("G:\\My Drive\\dartmouth",
"\\salas_lab_working\\cnv",
"\\Sample_Sheet_testing.csv"),
idat.files.dir = paste0("G:\\My Drive",
"\\dartmouth\\salas_lab_working",
"\\cnv\\blca_idat_files_testing"),
r.lib.path           = .libPaths()[1],
proj                 = "TCGA-BLCA",
visualize            = FALSE,
visualize.individual = FALSE,
weighted.mean        = "normal",
routine              = "k450",
reference            = NULL,
reference.name       = NULL,
split.by             = "gender_reported",
comparisons          = c("tumor","normal"),
epi.run.gistic = TRUE
)
devtools::load_all()
##devtools::install_github("mmariani123/MethylMasteR",
##                      auth_token="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")
library(MethylMasteR)
debug(methyl_master_k450)
methyl_master(main.dir = paste0("G:\\My Drive",
"\\dartmouth",
"\\salas_lab_working",
"\\cnv\\testing"),
work.dir = paste0("G:\\My Drive",
"\\dartmouth",
"\\salas_lab_working",
"\\cnv\\testing\\k450_work"),
output.dir = paste0("G:\\My Drive",
"\\dartmouth",
"\\salas_lab_working",
"\\cnv\\testing\\k450_output"),
n.cores = 1,
os.type = "linux",
sample.sheet.path = paste0("G:\\My Drive\\dartmouth",
"\\salas_lab_working\\cnv",
"\\Sample_Sheet_testing.csv"),
idat.files.dir = paste0("G:\\My Drive",
"\\dartmouth\\salas_lab_working",
"\\cnv\\blca_idat_files_testing"),
r.lib.path           = .libPaths()[1],
proj                 = "TCGA-BLCA",
visualize            = FALSE,
visualize.individual = FALSE,
weighted.mean        = "normal",
routine              = "k450",
reference            = "internal",
reference.name       = NULL,
split.by             = "gender_reported",
comparisons          = c("tumor","normal"),
epi.run.gistic = TRUE
)
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
debug(methyl_master_k450)
methyl_master(main.dir = paste0("G:\\My Drive",
"\\dartmouth",
"\\salas_lab_working",
"\\cnv\\testing"),
work.dir = paste0("G:\\My Drive",
"\\dartmouth",
"\\salas_lab_working",
"\\cnv\\testing\\k450_work"),
output.dir = paste0("G:\\My Drive",
"\\dartmouth",
"\\salas_lab_working",
"\\cnv\\testing\\k450_output"),
n.cores = 1,
os.type = "linux",
sample.sheet.path = paste0("G:\\My Drive\\dartmouth",
"\\salas_lab_working\\cnv",
"\\Sample_Sheet_testing.csv"),
idat.files.dir = paste0("G:\\My Drive",
"\\dartmouth\\salas_lab_working",
"\\cnv\\blca_idat_files_testing"),
r.lib.path           = .libPaths()[1],
proj                 = "TCGA-BLCA",
visualize            = FALSE,
visualize.individual = FALSE,
weighted.mean        = "normal",
routine              = "k450",
reference            = "internal",
reference.name       = NULL,
split.by             = "gender_reported",
comparisons          = c("tumor","normal"),
epi.run.gistic = TRUE
)
##devtools::install_github("mmariani123/MethylMasteR",
##                      auth_token="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")
library(MethylMasteR)
debug(methyl_master_k450)
##devtools::install_github("mmariani123/MethylMasteR",
##                      auth_token="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")
library(MethylMasteR)
debug(methyl_master_k450)
methyl_master(main.dir = paste0("G:\\My Drive",
"\\dartmouth",
"\\salas_lab_working",
"\\cnv\\testing"),
work.dir = paste0("G:\\My Drive",
"\\dartmouth",
"\\salas_lab_working",
"\\cnv\\testing\\k450_work"),
output.dir = paste0("G:\\My Drive",
"\\dartmouth",
"\\salas_lab_working",
"\\cnv\\testing\\k450_output"),
n.cores = 1,
os.type = "linux",
sample.sheet.path = paste0("G:\\My Drive\\dartmouth",
"\\salas_lab_working\\cnv",
"\\Sample_Sheet_testing.csv"),
idat.files.dir = paste0("G:\\My Drive",
"\\dartmouth\\salas_lab_working",
"\\cnv\\blca_idat_files_testing"),
r.lib.path           = .libPaths()[1],
proj                 = "TCGA-BLCA",
visualize            = FALSE,
visualize.individual = FALSE,
weighted.mean        = "normal",
routine              = "k450",
reference            = "internal",
reference.name       = NULL,
split.by             = "gender_reported",
comparisons          = c("tumor","normal"),
epi.run.gistic = TRUE
)
?openSesame
source("Data/methyl_master_visualize.R")
source("data/methyl_master_visualize.R")
source("R/methyl_master_visualize.R")
source("R/methyl_master_visualize.R")
devtools::load_all()
routine <<- "hm450"
devtools::load_all()
rm(routine)
routine
exists(routine)
exists(routine)
exists("routine")
devtools::load_all()
devtools::document()
?methyl_master
?MethylMasteR::methyl_master_hm450
?MethylMasteR::methyl_master_hm450()
install.packages("umap")
library(umap)
help(umap)
load(paste0("G:\\My Drive\\dartmouth",
"\\salas_lab_working\\cnv",
"\\testing\\epicopy",
"\\epicopy_results.rda"))
epicopy_results$output
dcast(ID~seg.mean)
data.table::dcast(ID~seg.mean)
data.table::dcast(epicopy_results$output,ID~seg.mean)
colnames(data.table::dcast(epicopy_results$output,ID~seg.mean))
colnames(data.table::dcast(epicopy_results$output,ID~seg.mean))
colnames(reshape2::dcast(epicopy_results$output,ID~seg.mean))
?dcast
colnames(reshape2::dcast(epicopy_results$output,seg.mean~ID))
reshape2::dcast(epicopy_results$output,seg.mean~ID)
reshape2::dcast(epicopy_results$output,seg.mean~ID,fun=print(seg.mean))
reshape2::dcast(epicopy_results$output,seg.mean~ID,fun.aggregate=print(seg.mean))
epicopy_results$output
reshape2::dcast(epicopy_results$output,seg.mean~ID)
reshape2::dcast(epicopy_results$output,seg.mean~ID,fun.aggregate = print())
reshape2::dcast(epicopy_results$output,seg.mean~ID,fun.aggregate = print)
reshape2::dcast(epicopy_results$output,seg.mean~ID,fun.aggregate = mean)
reshape2::dcast(epicopy_results$output,~ID,fun.aggregate = print(seg.mean))
reshape2::dcast(epicopy_results$output,.~ID,fun.aggregate = print(seg.mean))
reshape2::dcast(epicopy_results$output,.~ID,fun.aggregate = print("seg.mean"))
DF <- data.frame(a = 1:3, b = letters[10:12],
c = seq(as.Date("2004-01-01"), by = "week", length.out = 3),
stringsAsFactors = TRUE)
data.matrix(DF[1:2])
data.matrix(DF)
data.matrix(epicopy_results$output[c(1,3)])
data.matrix(epicopy_results$output[c(1,5)])
data.matrix(epicopy_results$output[c(1,6)])
data.matrix(epicopy_results$output[c(0,6)])
data.matrix(epicopy_results$output[c(1,6)])
data.matrix(epicopy_results$output[c(2,6)])
reshape2::dcast(epicopy_results$output,.~ID,value.var="seg.mean")
reshape2::dcast(epicopy_results$output,.~ID,value.var="seg.mean",fun.aggregate = print)
reshape2::dcast(epicopy_results$output,.~ID,value.var="seg.mean",fun.aggregate = print(x))
reshape2::dcast(epicopy_results$output,.~ID,fun.aggregate = print(x),value.var="seg.mean")
reshape2::dcast(epicopy_results$output,seg.mean.~ID,fun.aggregate = print(x),value.var="seg.mean")
reshape2::dcast(epicopy_results$output,seg.mean~ID,fun.aggregate = print(x),value.var="seg.mean")
reshape2::dcast(epicopy_results$output,seg.mean~ID,fun.aggregate = print,value.var="seg.mean")
reshape2::dcast(epicopy_results$output,seg.mean~ID,fun.aggregate = print)
reshape2::dcast(epicopy_results$output,seg.mean~ID)
epicopy_results$output
epicopy_results$data
epicopy_results$data$X7786915032_R01C01
cbind(epicopy_results$data$X7786915032_R01C01,
epicopy_results$data$X7796806101_R03C02,
epicopy_results$data$X7786915031_R06C01,
epicopy_results$data$X7786915031_R06C01,
epicopy_results$data$X9806233125_R01C01,
epicopy_results$data$X3999510104_R03C01)
umap(cbind(epicopy_results$data$X7786915032_R01C01,
epicopy_results$data$X7796806101_R03C02,
epicopy_results$data$X7786915031_R06C01,
epicopy_results$data$X7786915031_R06C01,
epicopy_results$data$X9806233125_R01C01,
epicopy_results$data$X3999510104_R03C01))
BiocManager::install("randomForest")
library(randomForest)
?train
?randomForest::randomForest
randomForest::train(x=epicopy_results$output$seg.mean
method = "rf",
ntree = 5)
randomForest::train(x=epicopy_results$output$seg.mean,
method = "rf",
ntree = 5)
randomForest(x=epicopy_results$output$seg.mean,
method = "rf",
ntree = 5)
epicopy_results$output$seg.mean
umap(mydata[1:20,])
mydata <- cbind(epicopy_results$data$X7786915032_R0
epicopy_results$data$X7796806101_R03C02,
epicopy_results$data$X7786915031_R06C01,
epicopy_results$data$X7786915031_R06C01,
epicopy_results$data$X9806233125_R01C01,
epicopy_results$data$X3999510104_R03C01)
mydata <- cbind(epicopy_results$data$X7786915032_R0,
epicopy_results$data$X7796806101_R03C02,
epicopy_results$data$X7786915031_R06C01,
epicopy_results$data$X7786915031_R06C01,
epicopy_results$data$X9806233125_R01C01,
epicopy_results$data$X3999510104_R03C01)
umap(mydata[1:20,])
umap.out <- umap(mydata[1:20,])
umap.out
plot(umap.out)
print(umap.out)
?umap
umap.out$data
umap.out$layout
plot(umap.out$layout)
umap.out <- umap(mydata[1:200,])
plot(umap.out$layout)
umap.out <- umap(mydata[1:2000,])
plot(umap.out$layout)
umap.out <- umap(mydata[1:20000,])
plot(umap.out$layout)
umap.out$knn
umap.out$knn$distances
umap.out$knn
umap.out$knn$indexes
umap.out$config
?umap
umap.out <- umap(mydata[1:200,])
plot(umap.out$layout)
umap.out <- umap(mydata[1:200,],
k=20)
plot(umap.out$layout)
umap.out <- umap(mydata[1:200,],
k=5)
plot(umap.out$layout)
umap.out <- umap(mydata[1:200,],
k=5)
plot(umap.out$layout)
umap.out <- umap(mydata[1:200,],
k=5)
plot(umap.out$layout)
plot(umap.out$layout)
umap.out <- umap(mydata[1:200,],
k=200)
plot(umap.out$layout)
umap.out <- umap(mydata[1:1000,],
k=200)
plot(umap.out$layout)
umap.out <- umap(mydata[1:1000,],
k=20)
plot(umap.out$layout)
umap.out <- umap(mydata[1:200,],
n_neighbors=3)
plot(umap.out$layout)
umap.out <- umap(mydata[1:200,],
n_neighbors=30)
plot(umap.out$layout)
# Determine number of clusters
wss <- (nrow(mydata)-1)*sum(apply(mydata,2,var))
for (i in 2:15) wss[i] <- sum(kmeans(mydata,
centers=i)$withinss)
mydata <- mydata[1:1000,]
# Determine number of clusters
wss <- (nrow(mydata)-1)*sum(apply(mydata,2,var))
for (i in 2:15) wss[i] <- sum(kmeans(mydata,
centers=i)$withinss)
plot(1:15, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
mydata <- umap.out$layout
# Determine number of clusters
wss <- (nrow(mydata)-1)*sum(apply(mydata,2,var))
for (i in 2:15) wss[i] <- sum(kmeans(mydata,
centers=i)$withinss)
plot(1:15, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
umap.out <- umap(mydata[1:1000,],
n_neighbors=15)
umap.out <- umap(mydata,
n_neighbors=15)
plot(umap.out$layout)
mydata <- umap.out$layout
# Determine number of clusters
wss <- (nrow(mydata)-1)*sum(apply(mydata,2,var))
for (i in 2:15) wss[i] <- sum(kmeans(mydata,
centers=i)$withinss)
plot(1:15, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
plot(umap.out$layout)
umap.out <- umap(mydata,
n_neighbors=5)
plot(umap.out$layout)
mydata <- umap.out$layout
# Determine number of clusters
wss <- (nrow(mydata)-1)*sum(apply(mydata,2,var))
for (i in 2:15) wss[i] <- sum(kmeans(mydata,
centers=i)$withinss)
plot(1:15, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
plot(umap.out$layout)
mydata <- mydata[1:10000,]
mydata <- cbind(epicopy_results$data$X7786915032_R0,
epicopy_results$data$X7796806101_R03C02,
epicopy_results$data$X7786915031_R06C01,
epicopy_results$data$X7786915031_R06C01,
epicopy_results$data$X9806233125_R01C01,
epicopy_results$data$X3999510104_R03C01)
mydata <- mydata[1:10000,]
umap.out <- umap(mydata,
n_neighbors=5)
plot(umap.out$layout)
mydata <- umap.out$layout
# Determine number of clusters
wss <- (nrow(mydata)-1)*sum(apply(mydata,2,var))
for (i in 2:15) wss[i] <- sum(kmeans(mydata,
centers=i)$withinss)
plot(1:15, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
plot(umap.out$layout)
umap.out <- umap(mydata,
n_neighbors=5,
n_components=3)
plot(umap.out$layout)
mydata <- umap.out$layout
# Determine number of clusters
wss <- (nrow(mydata)-1)*sum(apply(mydata,2,var))
for (i in 2:15) wss[i] <- sum(kmeans(mydata,
centers=i)$withinss)
plot(1:15, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
plot(umap.out$layout)
umap.out <- umap(mydata,
n_neighbors=5,
n_components=5)
plot(umap.out$layout)
umap.out$knn
umap.out$data
umap.out$layout
umap.out$layout[umap.out$layout<10]
umap.out$layout[which(umap.out$layout)<10]
umap.out$layout[which(umap.out$layout<10)]
umap.out$layout<10
which(umap.out$layout[umap.out$layout<10])
which(umap.out$layout<10)
umap.layout[which(umap.out$layout<10),]
umap.out$layout[which(umap.out$layout<10),]
umap.out$layout[which(umap.out$layout<10)]
which(umap.out$layout<10)
umap.out$layout
mydata <- cbind(epicopy_results$data$X7786915032_R0,
epicopy_results$data$X7796806101_R03C02,
epicopy_results$data$X7786915031_R06C01,
epicopy_results$data$X7786915031_R06C01,
epicopy_results$data$X9806233125_R01C01,
epicopy_results$data$X3999510104_R03C01)
mydata <- mydata[1:100,]
randomForest(x=mydata,
method = "rf",
ntree = 5)
rf <- randomForest(x=mydata,
method = "rf",
ntree = 5)
rf$proximity
1-rf$proximity
plot(umap.out$layout)
mydata <- umap.out$layout
# Determine number of clusters
wss <- (nrow(mydata)-1)*sum(apply(mydata,2,var))
for (i in 2:15) wss[i] <- sum(kmeans(mydata,
centers=i)$withinss)
plot(1:15, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
plot(umap.out$layout)
umap.out <- umap(mydata,
n_neighbors=5,
n_components=6)
mydata <- cbind(epicopy_results$data$X7786915032_R0,
epicopy_results$data$X7796806101_R03C02,
epicopy_results$data$X7786915031_R06C01,
epicopy_results$data$X7786915031_R06C01,
epicopy_results$data$X9806233125_R01C01,
epicopy_results$data$X3999510104_R03C01)
mydata <- mydata[1:100,]
umap.out <- umap(mydata,
n_neighbors=5,
n_components=6)
plot(umap.out$layout)
umap.out <- umap(mydata,
n_neighbors=30,
n_components=6)
plot(umap.out$layout)
