sep="\t",
stringsAsFactors = FALSE)
if(!is.null(subset.genes)){
de.data <- subset(de.data, gene %in% subset.genes)
}
setDT(de.data)
colnames(de.data)[1] <- "gene"
print(nrow(de.data))
if(any(is.na(de.data))){de.data=na.omit(de.data)}
volcano.plot <- ggplot(data=de.data,aes(x=log2FoldChange,y=-log10(pvalue))) +
geom_point(color=ifelse((abs(de.data$log2FoldChange)<1 | de.data$padj > 0.05),
"gray",ifelse(de.data$log2FoldChange<0, 'blue', 'red'))) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")) +
xlab("log 2 fold change") +
ylab("-log10(p-value)") +
ggtitle(plot.title) +
theme(plot.title = element_text(hjust = 0.5)) +
geom_hline(yintercept = -log10(0.05), color="green") +
geom_vline(xintercept = -1, color="green") +
geom_vline(xintercept = 1, color="green") +
geom_label_repel(##data=subset(de.data, gene %in% select.genes),
subset(de.data[order(de.data$padj, decreasing=FALSE)],
abs(log2FoldChange)>0 & gene %in% select.genes),
aes(label = gene),
segment.size = 10,
box.padding   = 0.35,
point.padding = 0.5,
segment.color = 'black',
max.overlaps = 200,
force=force)
if(save.plot==TRUE){
ggsave(filename = paste0(output.dir,"\\",output.name),
device="pdf",
plot=volcano.plot,
height=8,
width=8)
}
return(volcano.plot)
}
}
eRuption(input.file = "",
plot.title = "Genes for Resvan",
frame.in = as.data.frame(res@listData),
file = FALSE,
subset.genes = NULL,
select.genes = resvan.select.genes,
edge.r = FALSE,
output.dir = FALSE,
output.name = NULL,
force=20)
#!/usr/bin/env Rscript
# eRuption
#
# This is the main function for producging
# eRuption volcano plots
#
# You can learn more about package authoring with RStudio at:
#
#   http://r-pkgs.had.co.nz/
#
# Some useful keyboard shortcuts for package authoring:
#
#   Install Package:           'Ctrl + Shift + B'
#   Check Package:             'Ctrl + Shift + E'
#   Test Package:              'Ctrl + Shift + T
#Michael P Mariani PhD 2019-2021
#Make a customizable volcano plot using gene expression data output
#by DESeq2 or edgeR
library(data.table)
library(ggplot2)
library(ggrepel)
eRuption <- function(input.file = "",
plot.title = "",
frame.in = NULL,
file = TRUE,
subset.genes = NULL,
select.genes = NULL,
edge.r = FALSE,
output.dir = FALSE,
output.name = NULL,
save.plot = FALSE,
force=1){
if(edge.r==FALSE){
#################### DESeq2 ###############################################
if(file==TRUE){
input.file <- file.in
de.data <- read.table(file=input.file,
header=TRUE,
stringsAsFactors = FALSE,
sep=",")
}else{
de.data <- frame.in
}
setDT(de.data)
colnames(de.data)[1] <- "gene"
print(nrow(de.data))
if(!is.null(subset.genes)){
de.data <- subset(de.data, gene %in% subset.genes)
}
volcano.plot <- ggplot(data=de.data,aes(x=log2FoldChange,y=-log10(padj))) +
geom_point(color=ifelse((abs(de.data$log2FoldChange)<1 | de.data$padj > 0.05),
"gray",
ifelse(de.data$log2FoldChange<0, 'blue', 'red'))) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")) +
xlab("log2 fold change") +
ylab("-log10(p-value)") +
ggtitle(plot.title) +
theme(plot.title = element_text(hjust = 0.5)) +
geom_hline(yintercept = -log10(0.05), color="green") +
geom_vline(xintercept = -1, color="green") +
geom_vline(xintercept = 1, color="green") +
geom_label_repel(data=subset(de.data, gene %in% select.genes),
#data=head(subset(de.data[order(de.data$padj,
#decreasing=FALSE)], log2FoldChange>0), 10),
aes(label     = gene),
segment.size  = 5,
##box.padding   = 0.35,
##point.padding = 0.5,
segment.color = 'black',
max.overlaps  = 20000,
force         = force,
nudge_y=100)
if(save.plot==TRUE){
ggsave(filename = paste0(output.dir,"\\",output.name),
device="pdf",
plot=volcano.plot,
height=8,
width=8)
}
return(volcano.plot)
################### edgeR ############################################
}else{
de.data <- read.table(file = input.file,
header=TRUE,
sep="\t",
stringsAsFactors = FALSE)
if(!is.null(subset.genes)){
de.data <- subset(de.data, gene %in% subset.genes)
}
setDT(de.data)
colnames(de.data)[1] <- "gene"
print(nrow(de.data))
if(any(is.na(de.data))){de.data=na.omit(de.data)}
volcano.plot <- ggplot(data=de.data,aes(x=log2FoldChange,y=-log10(pvalue))) +
geom_point(color=ifelse((abs(de.data$log2FoldChange)<1 | de.data$padj > 0.05),
"gray",ifelse(de.data$log2FoldChange<0, 'blue', 'red'))) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")) +
xlab("log 2 fold change") +
ylab("-log10(p-value)") +
ggtitle(plot.title) +
theme(plot.title = element_text(hjust = 0.5)) +
geom_hline(yintercept = -log10(0.05), color="green") +
geom_vline(xintercept = -1, color="green") +
geom_vline(xintercept = 1, color="green") +
geom_label_repel(##data=subset(de.data, gene %in% select.genes),
subset(de.data[order(de.data$padj, decreasing=FALSE)],
abs(log2FoldChange)>0 & gene %in% select.genes),
aes(label = gene),
segment.size = 10,
box.padding   = 0.35,
point.padding = 0.5,
segment.color = 'black',
max.overlaps = 200,
force=force)
if(save.plot==TRUE){
ggsave(filename = paste0(output.dir,"\\",output.name),
device="pdf",
plot=volcano.plot,
height=8,
width=8)
}
return(volcano.plot)
}
}
eRuption(input.file = "",
plot.title = "Genes for Resvan",
frame.in = as.data.frame(res@listData),
file = FALSE,
subset.genes = NULL,
select.genes = resvan.select.genes,
edge.r = FALSE,
output.dir = FALSE,
output.name = NULL,
force=20)
#!/usr/bin/env Rscript
# eRuption
#
# This is the main function for producging
# eRuption volcano plots
#
# You can learn more about package authoring with RStudio at:
#
#   http://r-pkgs.had.co.nz/
#
# Some useful keyboard shortcuts for package authoring:
#
#   Install Package:           'Ctrl + Shift + B'
#   Check Package:             'Ctrl + Shift + E'
#   Test Package:              'Ctrl + Shift + T
#Michael P Mariani PhD 2019-2021
#Make a customizable volcano plot using gene expression data output
#by DESeq2 or edgeR
library(data.table)
library(ggplot2)
library(ggrepel)
eRuption <- function(input.file = "",
plot.title = "",
frame.in = NULL,
file = TRUE,
subset.genes = NULL,
select.genes = NULL,
edge.r = FALSE,
output.dir = FALSE,
output.name = NULL,
save.plot = FALSE,
force=1){
if(edge.r==FALSE){
#################### DESeq2 ###############################################
if(file==TRUE){
input.file <- file.in
de.data <- read.table(file=input.file,
header=TRUE,
stringsAsFactors = FALSE,
sep=",")
}else{
de.data <- frame.in
}
setDT(de.data)
colnames(de.data)[1] <- "gene"
print(nrow(de.data))
if(!is.null(subset.genes)){
de.data <- subset(de.data, gene %in% subset.genes)
}
volcano.plot <- ggplot(data=de.data,aes(x=log2FoldChange,y=-log10(padj))) +
geom_point(color=ifelse((abs(de.data$log2FoldChange)<1 | de.data$padj > 0.05),
"gray",
ifelse(de.data$log2FoldChange<0, 'blue', 'red'))) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")) +
xlab("log2 fold change") +
ylab("-log10(p-value)") +
ggtitle(plot.title) +
theme(plot.title = element_text(hjust = 0.5)) +
geom_hline(yintercept = -log10(0.05), color="green") +
geom_vline(xintercept = -1, color="green") +
geom_vline(xintercept = 1, color="green") +
geom_label_repel(data=subset(de.data, gene %in% select.genes),
#data=head(subset(de.data[order(de.data$padj,
#decreasing=FALSE)], log2FoldChange>0), 10),
aes(label     = gene),
segment.size  = 1,
##box.padding   = 0.35,
##point.padding = 0.5,
segment.color = 'black',
max.overlaps  = 20000,
force         = force,
nudge_y=100)
if(save.plot==TRUE){
ggsave(filename = paste0(output.dir,"\\",output.name),
device="pdf",
plot=volcano.plot,
height=8,
width=8)
}
return(volcano.plot)
################### edgeR ############################################
}else{
de.data <- read.table(file = input.file,
header=TRUE,
sep="\t",
stringsAsFactors = FALSE)
if(!is.null(subset.genes)){
de.data <- subset(de.data, gene %in% subset.genes)
}
setDT(de.data)
colnames(de.data)[1] <- "gene"
print(nrow(de.data))
if(any(is.na(de.data))){de.data=na.omit(de.data)}
volcano.plot <- ggplot(data=de.data,aes(x=log2FoldChange,y=-log10(pvalue))) +
geom_point(color=ifelse((abs(de.data$log2FoldChange)<1 | de.data$padj > 0.05),
"gray",ifelse(de.data$log2FoldChange<0, 'blue', 'red'))) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")) +
xlab("log 2 fold change") +
ylab("-log10(p-value)") +
ggtitle(plot.title) +
theme(plot.title = element_text(hjust = 0.5)) +
geom_hline(yintercept = -log10(0.05), color="green") +
geom_vline(xintercept = -1, color="green") +
geom_vline(xintercept = 1, color="green") +
geom_label_repel(##data=subset(de.data, gene %in% select.genes),
subset(de.data[order(de.data$padj, decreasing=FALSE)],
abs(log2FoldChange)>0 & gene %in% select.genes),
aes(label = gene),
segment.size = 10,
box.padding   = 0.35,
point.padding = 0.5,
segment.color = 'black',
max.overlaps = 200,
force=force)
if(save.plot==TRUE){
ggsave(filename = paste0(output.dir,"\\",output.name),
device="pdf",
plot=volcano.plot,
height=8,
width=8)
}
return(volcano.plot)
}
}
eRuption(input.file = "",
plot.title = "Genes for Resvan",
frame.in = as.data.frame(res@listData),
file = FALSE,
subset.genes = NULL,
select.genes = resvan.select.genes,
edge.r = FALSE,
output.dir = FALSE,
output.name = NULL,
force=20)
imx.df <- Reduce(function(d1,d2) bigmemoryExt::cbindBM(d1, d2, binding="right"),
imx.frames)
?bigmemoryExt::cbindBM
imx.df <- Reduce(function(d1,d2) bigmemoryExt::cbindBM(d1, d2, binding="right"),
imx.frames, type="integer")
imx.df <- Reduce(function(d1,d2) bigmemoryExt::cbindBM(d1,
d2,
binding="right",
type="integer"),
imx.frames)
imx.df <- Reduce(function(d1,d2) bigmemoryExt::cbindBM(d1,
d2,
binding="right",
type="character"),
imx.frames)
imx.frames <- lapply(imx.files,
FUN=function(x){
name.now <- gsub(".*/|_count.txt","",x,perl=TRUE)
print(name.now)
df.out <- read.table(x,
sep="\t",
header=TRUE,
stringsAsFactors=FALSE);
colnames(df.out)[1] <- "gene.id"
colnames(df.out)[2] <- "gene"
##lets remove the first column
##that has the ensemble gene name:
##df.genes <- df.out[,2]
df.out <- df.out[,-c(1,2)]
colnames(df.out)
##colnames(df.out) <-
##  paste0(colnames(df.out),"_",name.now)
##df.out <- cbind(df.genes, df.out)
nrow.now <- nrow(unique(df.out));
print(nrow.now);
imx.num.genes.list <- c(imx.num.genes.list, nrow.now);
return(df.out)
})
length(imx.frames)
colnames(imx.frames)
colnames(imx.frames[[1]])
?inner_join
imx.frames <- lapply(imx.files,
FUN=function(x){
name.now <- gsub(".*/|_count.txt","",x,perl=TRUE)
print(name.now)
df.out <- read.table(x,
sep="\t",
header=TRUE,
stringsAsFactors=FALSE);
colnames(df.out)[1] <- "gene.id"
colnames(df.out)[2] <- "gene"
##lets remove the first column
##that has the ensemble gene name:
##df.genes <- df.out[,2]
df.out <- df.out[,-c(1)]
colnames(df.out)
##colnames(df.out) <-
##  paste0(colnames(df.out),"_",name.now)
##df.out <- cbind(df.genes, df.out)
nrow.now <- nrow(unique(df.out));
print(nrow.now);
imx.num.genes.list <- c(imx.num.genes.list, nrow.now);
return(df.out)
})
colnames(imx.frames[[1]])
imx.df <- Reduce(function(d1,d2) dplyr::full_join(d1, d2, by = c("genes")),
imx.frames)
colnames(imx.frames[[1]])[1]
colnames(imx.frames[[2]])[1]
lapply(imx.frame,FUN = function(x){print(colnames(x)[1])})
lapply(imx.frames,FUN = function(x){print(colnames(x)[1])})
imx.df <- Reduce(function(d1,d2) dplyr::full_join(d1, d2, by = c("gene")),
imx.frames)
memory'limit('
memory.limit()
?memory.limit
R_MAX_MEM_SIZE
memory.size()
imx.df <- Reduce(function(d1,d2) dplyr::full_join(d1, d2, by = c("gene")),
imx.frames[1:2])
View(imx.df)
?inner_join
imx.df[[1]][duplicated(rownames(imx.df[[1]]))]
duplicated(rownames(imx.df[[1]]))
##Blowing up memory ...
imx.df[[1]][duplicated((imx.df[[1]]$gene))]
imx.df[[1]]
imx.df[[1]]$gene
imx.df[1]$gene)
imx.df[1]$gene
##Blowing up memory ...
imx.frames[[1]][duplicated((imx.frames[[1]]$gene))]
imx.frames[[1]]
imx.frames[[1]]$gene
imx.frames[[1]][duplicated(imx.frames[[1]]$gene),]
imx.frames[[1]][!duplicated(imx.frames[[1]]$gene),]
imx.frames[[1]][duplicated(imx.frames[[1]]$gene),]
1400 * 1400
?duplicated
imx.frames <- lapply(imx.files,
FUN=function(x){
name.now <- gsub(".*/|_count.txt","",x,perl=TRUE)
print(name.now)
df.out <- read.table(x,
sep="\t",
header=TRUE,
stringsAsFactors=FALSE);
colnames(df.out)[1] <- "gene.id"
colnames(df.out)[2] <- "gene"
##lets remove the first column
##that has the ensemble gene name:
##df.genes <- df.out[,2]
df.out <- df.out[,-c(1)]
colnames(df.out)
##remove duplicate genes so doesn't blow up full join'
df.out <- df.out[!(duplicated(df.out) |
duplicated(df.out, fromLast = TRUE)), ]
imx.frames[[1]][duplicated(imx.frames[[1]]$gene),]
##colnames(df.out) <-
##  paste0(colnames(df.out),"_",name.now)
##df.out <- cbind(df.genes, df.out)
nrow.now <- nrow(unique(df.out));
print(nrow.now);
imx.num.genes.list <- c(imx.num.genes.list, nrow.now);
return(df.out)
})
##Check:
imx.frames[[1]][1,1]
imx.frames[[2]][1,1]
imx.frames[[1]][1,2]
imx.frames[[2]][1,2]
max(unlist(imx.num.genes.list))
length(imx.frames) ##28
colnames(imx.frames[[2]])[1]
lapply(imx.frames,FUN = function(x){print(colnames(x)[1])})
imx.df <- Reduce(function(d1,d2) dplyr::full_join(d1, d2, by = c("gene")),
imx.frames[1:2])
imx.frames <- lapply(imx.files,
FUN=function(x){
name.now <- gsub(".*/|_count.txt","",x,perl=TRUE)
print(name.now)
df.out <- read.table(x,
sep="\t",
header=TRUE,
stringsAsFactors=FALSE);
colnames(df.out)[1] <- "gene.id"
colnames(df.out)[2] <- "gene"
##lets remove the first column
##that has the ensemble gene name:
##df.genes <- df.out[,2]
df.out <- df.out[,-c(1)]
colnames(df.out)
##remove duplicate genes so doesn't blow up full join'
df.out <- df.out[!(duplicated(df.out$gene) |
duplicated(df.out$gene, fromLast = TRUE)),]
##colnames(df.out) <-
##  paste0(colnames(df.out),"_",name.now)
##df.out <- cbind(df.genes, df.out)
nrow.now <- nrow(unique(df.out));
print(nrow.now);
imx.num.genes.list <- c(imx.num.genes.list, nrow.now);
return(df.out)
})
##Check:
imx.frames[[1]][1,1]
imx.frames[[2]][1,1]
imx.frames[[1]][1,2]
imx.frames[[2]][1,2]
max(unlist(imx.num.genes.list))
length(imx.frames) ##28
colnames(imx.frames[[2]])[1]
lapply(imx.frames,FUN = function(x){print(colnames(x)[1])})
imx.df <- Reduce(function(d1,d2) dplyr::full_join(d1, d2, by = c("gene")),
imx.frames[1:2])
imx.df <- Reduce(function(d1,d2) dplyr::full_join(d1, d2, by = c("gene")),
imx.frames)
nrow(imx.df) ##53344
ncol(imx.df) ##9881
