visualize.individual = FALSE,
weighted.mean        = "normal",
routine              = "sesame",
reference            = "comparison", ##"internal"
reference.name       = "all",
split.by             = "gender_reported", ##NULL
comparison           = c("tumor","normal"),
overlap.density      = 0.1,
sesame.data.cache    = "EPIC",
sesame.data.normal   = 'EPIC.5.normal',
sesame.ref.version   = "hg38",
epi.run.gistic       = TRUE,
save.seg             = FALSE,
olaps.split.field    = "Sample_ID",
estimate.recurrence  = TRUE,
ov.less.stringent.ra.setting = FALSE,
ov.pvalue            = 0.05,
ov.keep.extra.columns = TRUE,
simplify.reduce      = weightedmean,
create.dir           = FALSE
)
names(seg)
devtools::load_all()
idat.files.dir <- paste0("C:\\Users\\Mike",
"\\Desktop\\cnv_testing",
"\\data\\blca_idat_files_pooled")
output.dir <- paste0("C:\\Users\\Mike",
"\\Desktop\\cnv_testing",
"\\sesame_normal_sex")
sample.sheet.path <- paste0("C:\\Users\\Mike",
"\\Desktop\\cnv_testing",
"\\Sample_Sheet.csv")
methyl_master(input.dir            = idat.files.dir,
output.dir           = output.dir,
sample.sheet.path    = sample.sheet.path,
r.lib.path           = .libPaths()[1],
n.cores              = 1,
os.type              = "windows",
proj                 = "TCGA-BLCA",
visualize            = TRUE,
visualize.individual = FALSE,
weighted.mean        = "normal",
routine              = "sesame",
reference            = "comparison", ##"internal"
reference.name       = "all",
split.by             = "gender_reported", ##NULL
comparison           = c("tumor","normal"),
overlap.density      = 0.1,
sesame.data.cache    = "EPIC",
sesame.data.normal   = 'EPIC.5.normal',
sesame.ref.version   = "hg38",
epi.run.gistic       = TRUE,
save.seg             = TRUE,
olaps.split.field    = "Sample_ID",
estimate.recurrence  = TRUE,
ov.less.stringent.ra.setting = FALSE,
ov.pvalue            = 0.05,
ov.keep.extra.columns = TRUE,
simplify.reduce      = weightedmean,
create.dir           = FALSE
)
debug(methyl_master)
debug(methyl_master_sesame)
debug(methyl_master_olaps_and_visualize)
devtools::load_all()
debug(methyl_master)
debug(methyl_master_sesame)
debug(methyl_master_olaps_and_visualize)
idat.files.dir <- paste0("C:\\Users\\Mike",
"\\Desktop\\cnv_testing",
"\\data\\blca_idat_files_pooled")
output.dir <- paste0("C:\\Users\\Mike",
"\\Desktop\\cnv_testing",
"\\sesame_normal_sex")
sample.sheet.path <- paste0("C:\\Users\\Mike",
"\\Desktop\\cnv_testing",
"\\Sample_Sheet.csv")
methyl_master(input.dir            = idat.files.dir,
output.dir           = output.dir,
sample.sheet.path    = sample.sheet.path,
r.lib.path           = .libPaths()[1],
n.cores              = 1,
os.type              = "windows",
proj                 = "TCGA-BLCA",
visualize            = TRUE,
visualize.individual = FALSE,
weighted.mean        = "normal",
routine              = "sesame",
reference            = "comparison", ##"internal"
reference.name       = "all",
split.by             = "gender_reported", ##NULL
comparison           = c("tumor","normal"),
overlap.density      = 0.1,
sesame.data.cache    = "EPIC",
sesame.data.normal   = 'EPIC.5.normal',
sesame.ref.version   = "hg38",
epi.run.gistic       = TRUE,
save.seg             = TRUE,
olaps.split.field    = "Sample_ID",
estimate.recurrence  = TRUE,
ov.less.stringent.ra.setting = FALSE,
ov.pvalue            = 0.05,
ov.keep.extra.columns = TRUE,
simplify.reduce      = weightedmean,
create.dir           = FALSE
)
debug(methyl_master)
debug(methyl_master_sesame)
debug(methyl_master_olaps_and_visualize)
idat.files.dir <- paste0("C:\\Users\\Mike",
"\\Desktop\\cnv_testing",
"\\data\\blca_idat_files_pooled")
output.dir <- paste0("C:\\Users\\Mike",
"\\Desktop\\cnv_testing",
"\\sesame_normal_sex")
sample.sheet.path <- paste0("C:\\Users\\Mike",
"\\Desktop\\cnv_testing",
"\\Sample_Sheet.csv")
methyl_master(input.dir            = idat.files.dir,
output.dir           = output.dir,
sample.sheet.path    = sample.sheet.path,
r.lib.path           = .libPaths()[1],
n.cores              = 1,
os.type              = "windows",
proj                 = "TCGA-BLCA",
visualize            = TRUE,
visualize.individual = FALSE,
weighted.mean        = "normal",
routine              = "sesame",
reference            = "comparison", ##"internal"
reference.name       = "all",
split.by             = "gender_reported", ##NULL
comparison           = c("tumor","normal"),
overlap.density      = 0.1,
sesame.data.cache    = "EPIC",
sesame.data.normal   = 'EPIC.5.normal',
sesame.ref.version   = "hg38",
epi.run.gistic       = TRUE,
save.seg             = TRUE,
olaps.split.field    = "Sample_ID",
estimate.recurrence  = TRUE,
ov.less.stringent.ra.setting = FALSE,
ov.pvalue            = 0.05,
ov.keep.extra.columns = TRUE,
simplify.reduce      = weightedmean,
create.dir           = TRUE
)
devtools::load_all()
debug(methyl_master)
debug(methyl_master_sesame)
debug(methyl_master)
debug(methyl_master_sesame)
debug(methyl_master_olaps_and_visualize)
idat.files.dir <- paste0("C:\\Users\\Mike",
"\\Desktop\\cnv_testing",
"\\data\\blca_idat_files_pooled")
output.dir <- paste0("C:\\Users\\Mike",
"\\Desktop\\cnv_testing",
"\\sesame_normal_sex")
sample.sheet.path <- paste0("C:\\Users\\Mike",
"\\Desktop\\cnv_testing",
"\\Sample_Sheet.csv")
methyl_master(input.dir            = idat.files.dir,
output.dir           = output.dir,
sample.sheet.path    = sample.sheet.path,
r.lib.path           = .libPaths()[1],
n.cores              = 1,
os.type              = "windows",
proj                 = "TCGA-BLCA",
visualize            = TRUE,
visualize.individual = FALSE,
weighted.mean        = "normal",
routine              = "sesame",
reference            = "comparison", ##"internal"
reference.name       = "all",
split.by             = "gender_reported", ##NULL
comparison           = c("tumor","normal"),
overlap.density      = 0.1,
sesame.data.cache    = "EPIC",
sesame.data.normal   = 'EPIC.5.normal',
sesame.ref.version   = "hg38",
epi.run.gistic       = TRUE,
save.seg             = TRUE,
olaps.split.field    = "Sample_ID",
estimate.recurrence  = TRUE,
ov.less.stringent.ra.setting = FALSE,
ov.pvalue            = 0.05,
ov.keep.extra.columns = TRUE,
simplify.reduce      = weightedmean,
create.dir           = TRUE
)
names(seg.out)
undebug(methyl_master_sesame)
debug(methyl_master)
##debug(methyl_master_sesame)
debug(methyl_master_olaps_and_visualize)
idat.files.dir <- paste0("C:\\Users\\Mike",
"\\Desktop\\cnv_testing",
"\\data\\blca_idat_files_pooled")
output.dir <- paste0("C:\\Users\\Mike",
"\\Desktop\\cnv_testing",
"\\sesame_normal_sex")
sample.sheet.path <- paste0("C:\\Users\\Mike",
"\\Desktop\\cnv_testing",
"\\Sample_Sheet.csv")
methyl_master(input.dir            = idat.files.dir,
output.dir           = output.dir,
sample.sheet.path    = sample.sheet.path,
r.lib.path           = .libPaths()[1],
n.cores              = 1,
os.type              = "windows",
proj                 = "TCGA-BLCA",
visualize            = TRUE,
visualize.individual = FALSE,
weighted.mean        = "normal",
routine              = "sesame",
reference            = "comparison", ##"internal"
reference.name       = "all",
split.by             = "gender_reported", ##NULL
comparison           = c("tumor","normal"),
overlap.density      = 0.1,
sesame.data.cache    = "EPIC",
sesame.data.normal   = 'EPIC.5.normal',
sesame.ref.version   = "hg38",
epi.run.gistic       = TRUE,
save.seg             = TRUE,
olaps.split.field    = "Sample_ID",
estimate.recurrence  = TRUE,
ov.less.stringent.ra.setting = FALSE,
ov.pvalue            = 0.05,
ov.keep.extra.columns = TRUE,
simplify.reduce      = weightedmean,
create.dir           = TRUE
)
library(Seurat)
devtools::load_all()
debug(methyl_master)
debug(methyl_master_sesame)
debug(methyl_master_olaps_and_visualize)
idat.files.dir <- paste0("G:\\My Drive\\dartmouth",
"\\salas_lab_working\\cnv",
"\\cnv_testing\\data",
"\\blca_idat_files_pooled")
output.dir <- paste0("G:\\My Drive\\dartmouth",
"\\salas_lab_working\\cnv",
"\\cnv_testing\\test_sesame_normal")
sample.sheet.path <- paste0("G:\\My Drive\\dartmouth",
"\\salas_lab_working\\cnv",
"\\cnv_testing\\Sample_Sheet.csv")
methyl_master(input.dir            = idat.files.dir,
output.dir           = output.dir,
sample.sheet.path    = sample.sheet.path,
r.lib.path           = .libPaths()[1],
n.cores              = 1,
os.type              = "windows",
proj                 = "TCGA-BLCA",
visualize            = TRUE,
visualize.individual = FALSE,
weighted.mean        = "normal",
routine              = "sesame",
reference            = "comparison", ##"internal"
reference.name       = "all",
split.by             = NULL, ##"gender_reported"
comparison           = c("tumor","cord"),
overlap.density      = 0.1,
sesame.data.cache    = "EPIC",
sesame.data.normal   = 'EPIC.5.normal',
sesame.ref.version   = "hg38",
epi.run.gistic       = TRUE,
save.seg             = TRUE,
olaps.split.field    = "Sample_ID",
estimate.recurrence  = TRUE,
ov.less.stringent.ra.setting = FALSE,
ov.pvalue            = 0.05,
ov.keep.extra.columns = TRUE,
simplify.reduce      = weightedmean,
create.dir           = TRUE
)
library(future)
future::plan(multisession)
input.dir<-paste0("G:\\My Drive\\dartmouth\\salas_lab_working\\cnv\\cnv_testing\\data\\blca_idat_files_pooled")
sample.sheet.path<-paste0("G:\\My Drive\\dartmouth\\salas_lab_working\\cnv\\cnv_testing\\Sample_Sheet.csv")
sample.sheet.df<-read.csv(sample.sheet.path,
header=TRUE,
stringsAsFactors = FALSE)
##ChAMP
source(paste0("G:\\My Drive\\dartmouth\\salas_lab_working\\cnv\\cnv_testing\\files\\methyl_master_champ_helper_functions.R"))
champ.path<-paste0("G:\\My Drive\\dartmouth\\salas_lab_working\\cnv\\cnv_testing\\files\\methyl_master_champ.R")
##ChAMP.EpiMod START requires below or throws error
load(file=paste0("G:\\My Drive\\dartmouth\\salas_lab_working\\cnv\\cnv_testing\\probe450kfemanno.rda"))
champ.dir.1<-"G:\\My Drive\\dartmouth\\salas_lab_working\\cnv\\cnv_testing\\test_champ_normal"
champ.dir.2<-"G:\\My Drive\\dartmouth\\salas_lab_working\\cnv\\cnv_testing\\test_champ_cord"
champ.dir.3<-"G:\\My Drive\\dartmouth\\salas_lab_working\\cnv\\cnv_testing\\test_champ_internal"
champ.dir.4<-"G:\\My Drive\\dartmouth\\salas_lab_working\\cnv\\cnv_testing\\test_champ_sex_paired"
champ.input.dir        = input.dir
champ.output.dir       = champ.dir.1
champ.sample.sheet     = sample.sheet.path
champ.array.type       = "450K"
champ.batch.name       = c("Batch")
champ.padj             = 0.05
champ.ncores           = 1
champ.control          = TRUE
champ.control.group    = "Sample_Group"
champ.comparison       = c("tumor","normal")
##champ.contol.group   = "champCtls"
champ.runimpute        = TRUE
champ.runQC            = TRUE
champ.runnorm          = TRUE
champ.runSVD           = TRUE
champ.runCombat        = FALSE
champ.runDMP           = TRUE
champ.runDMR           = TRUE
champ.runBlock         = TRUE
champ.runGSEA          = TRUE
champ.save.seg         = TRUE
##ChAMP 1
profmem.out <- profmem::profmem({
start.time <- Sys.time()
source(champ.path)
end.time <- Sys.time()
total.time <<- end.time - start.time
}) ##End profmem
warnigns()
warnings()
champ_results <<-       champ.process(directory     = champ.input.dir,
resultsDir    = champ.output.dir,
sample.sheet  = champ.sample.sheet,
arraytype     = champ.array.type, ##"450K"
batchname     = champ.batch.name,
adjPVal       = champ.padj,
cores         = champ.ncores,
control       = champ.control,
controlGroup  = champ.contol.group,
compare.group = champ.comparison,
##champ.plit.bt = champ.split.by,
runimpute     = champ.runimpute,
runQC         = champ.runQC,
runnorm       = champ.runnorm,
runSVD        = champ.runSVD,
runCombat     = champ.runCombat,
runDMP        = champ.runDMP,
runDMR        = champ.runDMR,
runBlock      = champ.runBlock,
runGSEA       = champ.runGSEA)
profmem.out$what
profmem.out
profmem.out$trace
profmem.out$bytes
max(profmem.out$bytes)
profmem.out
View(profmem.out)
x <- 1:100
mem(x)
profmem(mean(x + 1))
library(profmem)
x <- 1:100
mem(x)
profmem(mean(x + 1))
BiocManager::install("matter")
library(matter)
x <- 1:100
mem(x)
matter::profmem(mean(x + 1))
x <- 1:100
matter::mem(x)
matter::profmem(mean(x + 1))
x <- 1:100
matter::mem(x)
mem.output <- matter::profmem(mean(x + 1))
mem.output
mem.output[3]
knitr::opts_chunk$set(echo = TRUE)
work.dir <- "G:\\My Drive\\dartmouth\\whitfield_lab_working\\ai_meta_analysis"
adex.input.dir <- paste0(work.dir,
file.sep,
"data\\ADEx_data")
adex.input.dir <- paste0(work.dir,
.Platform$OS.type,
"data\\ADEx_data")
adex.files <- list.files(adex.input.dir,
pattern = ".tsv",
full.names = TRUE)
colnames.list <- list()
adex.dfs <- lapply(adex.files,
FUN=function(x){df=read.table(x,
sep="\t",
header=TRUE,
stringsAsFactors=FALSE);
##df$sample=x;
print(colnames(df)[1]);
colnames.list[[length(colnames.list) + 1]] <<- colnames(df)
print(nrow(df));
return(df)}
)
##Check for duplicate samples:
table(duplicated(unlist(colnames.list)[unlist(colnames.list)!="gene"]))
adex.files
adex.input.dir
adex.input.dir <- paste0(work.dir,"\\data\\ADEx_data")
adex.files <- list.files(adex.input.dir,
pattern = ".tsv",
full.names = TRUE)
adex.input.dir <- paste0(work.dir,
.Platform$file.sep,
"data\\ADEx_data")
adex.files <- list.files(adex.input.dir,
pattern = ".tsv",
full.names = TRUE)
work.dir <- "G:\\My Drive\\dartmouth\\whitfield_lab_working\\ai_meta_analysis"
adex.input.dir <- paste0(work.dir,"\\data\\ADEx_data")
adex.input.dir <- paste0(work.dir,
.Platform$file.sep,
"data\\ADEx_data")
adex.files <- list.files(adex.input.dir,
pattern = ".tsv",
full.names = TRUE)
adex.files
colnames.list <- list()
adex.dfs <- lapply(adex.files,
FUN=function(x){df=read.table(x,
sep="\t",
header=TRUE,
stringsAsFactors=FALSE);
##df$sample=x;
print(colnames(df)[1]);
colnames.list[[length(colnames.list) + 1]] <<- colnames(df)
print(nrow(df));
return(df)}
)
adex.dfs <- lapply(adex.files,
FUN=function(x){df=read.table(x,
sep="\t",
header=TRUE,
stringsAsFactors=FALSE);
##df$sample=x;
print(colnames(df)[1]);
colnames.list[[length(colnames.list) + 1]] <<- colnames(df)
print(nrow(df));
return(df)}
)
##Check for duplicate samples:
table(duplicated(unlist(colnames.list)[unlist(colnames.list)!="gene"]))
##Check for duplicate samples:
table(duplicated(unlist(colnames.list)[unlist(colnames.list)!="gene"]))
adex.meta.data.file <- paste0(work.dir,
.Platform$file.sep,
"data\\adex_metadata.tsv")
adex.meta.data.df <- read.table(adex.meta.data.file,
header = TRUE,
stringsAsFactors = FALSE,
sep="\t")
adex.meta.data.df$sample.count <- 1
adex.melted.metadata <- melt(adex.meta.data.df,
id.vars=c("Condition",
"Tissue",
"Cell.Type",
"Age",
"Gender"))
knitr::opts_chunk$set(echo = TRUE)
library(reshape2)
adex.melted.metadata <- reshape2::melt(adex.meta.data.df,
id.vars=c("Condition",
"Tissue",
"Cell.Type",
"Age",
"Gender"))
summary.adex.meta.data <- adex.meta.data.df %>%
group_by(Condition,
Tissue,
Cell.Type,
Gender,
Age,
Ethnicity) %>%
summarise(
sample_count=sum(`sample.count`)
)
library(reshape2)
library(magrittr)
summary.adex.meta.data <- adex.meta.data.df %>%
group_by(Condition,
Tissue,
Cell.Type,
Gender,
Age,
Ethnicity) %>%
summarise(
sample_count=sum(`sample.count`)
)
knitr::opts_chunk$set(echo = TRUE)
library(reshape2)
library(magrittr)
library(dplyr)
summary.adex.meta.data <- adex.meta.data.df %>%
group_by(Condition,
Tissue,
Cell.Type,
Gender,
Age,
Ethnicity) %>%
dplyr::summarise(
sample_count=sum(`sample.count`)
)
summary.adex.meta.data[is.na(summary.adex.meta.data)] <- "unknown"
glm.adex <- glm(sample_count~Condition+Tissue+Cell.Type+Gender+Age+Ethnicity,
data=summary.adex.meta.data,
family=poisson)
summary(glm.adex)
##Looks like about 100 duplicated samples, so let's remove
sub.adex.meta.data.nd <-
adex.meta.data.df[!duplicated(adex.meta.data.df$Sample),]
sub.adex.meta.data.nd$Condition %>% unique()
sub.adex.meta.data.nd$Condition <- factor(sub.adex.meta.data.nd$Condition)
